<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>程序猿的小本儿本儿</title><description>程振宇的个人博客,Swift,Swift UI,Combine,iOS APP,杂事儿</description><link>https://chengzhenyu.github.io</link><language>zh</language><lastBuildDate>Sat, 20 Aug 2022 17:50:01 +0800</lastBuildDate><pubDate>Sat, 20 Aug 2022 17:50:01 +0800</pubDate><ttl>250</ttl><atom:link href="https://chengzhenyu.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://chengzhenyu.github.io/posts/20220820-sampleCode</guid><title>Sample Code</title><description></description><link>https://chengzhenyu.github.io/posts/20220820-sampleCode</link><pubDate>Sat, 20 Aug 2022 14:00:00 +0800</pubDate><content:encoded><![CDATA[<blockquote><p>注： 2022年，SwiftUI 4.0时代，有些代码已经过时咯～</p></blockquote><h2>渐变进度条</h2><pre data-language="swift" class="hljs"><code><span class="hljs-type">ZStack</span>(alignment: .leading) {
    <span class="hljs-type">Capsule</span>()
        .fill(.tertiary)
        .foregroundStyle(.white)
    <span class="hljs-type">GeometryReader</span> { proxy <span class="hljs-keyword">in</span>
        <span class="hljs-type">Capsule</span>()
            .fill(.linearGradient(.<span class="hljs-keyword">init</span>(colors: [.orange, .red]), startPoint: .leading, endPoint: .trailing))
            .frame(width: (cast.farenheit / <span class="hljs-number">140</span>) * proxy.size.width)
    }   
}
.frame(height:<span class="hljs-number">4</span>)
</code></pre><h2>$visibility.animation(.linear(duration: 5))</h2><pre data-language="swift" class="hljs"><code><span class="hljs-type">Toggle</span>(isOn: $visibility.animation(.linear(duration: <span class="hljs-number">5</span>))) {
    <span class="hljs-type">Text</span>(<span class="hljs-string">"Toggle Text Views"</span>)
}
</code></pre><h2>.gesture(nil)</h2><pre data-language="swift" class="hljs"><code><span class="hljs-comment">// A gesture recognizer can be removed from a view by passing a nil value to the gesture() modifier</span>
<span class="hljs-comment">// 吃掉手势事件的方法</span>
.gesture(<span class="hljs-literal">nil</span>)
</code></pre><h2>refreshable</h2><pre data-language="swift" class="hljs"><code><span class="hljs-type">ScrollView</span> {
    <span class="hljs-type">Text</span>(<span class="hljs-string">"hello world."</span>)
}
.refreshable {
    
}
</code></pre><h2>.push(from: .trailing)</h2><pre data-language="swift" class="hljs"><code><span class="hljs-type">Text</span>(<span class="hljs-string">"hello world."</span>)
    .transition(.push(from: .trailing))
</code></pre><h2>AnyLayout</h2><pre data-language="swift" class="hljs"><code><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ContentView</span>: <span class="hljs-title">View</span> </span>{
    @<span class="hljs-type">State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> show: <span class="hljs-type">Bool</span> = <span class="hljs-literal">false</span>
    <span class="hljs-keyword">var</span> body: some <span class="hljs-type">View</span> {
        <span class="hljs-type">ZStack</span> {
            <span class="hljs-keyword">let</span> dynamicLayout = show ? <span class="hljs-type">AnyLayout</span>(<span class="hljs-type">VStackLayout</span>()) : <span class="hljs-type">AnyLayout</span>(<span class="hljs-type">HStackLayout</span>())
            dynamicLayout {
                <span class="hljs-type">Text</span>(<span class="hljs-string">"hello"</span>)
                <span class="hljs-type">Text</span>(<span class="hljs-string">"world"</span>)
            }
            .onTapGesture {
                withAnimation(.easeInOut(duration: <span class="hljs-number">1</span>)) {
                    show.toggle()
                }
            }
        }
    }
}
</code></pre><pre data-language="swift" class="hljs"><code><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ContentView</span>: <span class="hljs-title">View</span> </span>{ <span class="hljs-comment">//AnyLayout 另一个例子（官方）</span>
    @<span class="hljs-type">Environment</span>(\.dynamicTypeSize) <span class="hljs-keyword">var</span> dynamicTypeSize
    
    <span class="hljs-keyword">var</span> body: some <span class="hljs-type">View</span> {
        <span class="hljs-keyword">let</span> layout = dynamicTypeSize &lt;= .medium ?
        <span class="hljs-type">AnyLayout</span>(<span class="hljs-type">HStack</span>()) : <span class="hljs-type">AnyLayout</span>(<span class="hljs-type">VStack</span>())
        
        layout {
            <span class="hljs-type">Text</span>(<span class="hljs-string">"First label"</span>)
            <span class="hljs-type">Text</span>(<span class="hljs-string">"Second label"</span>)
        }
    }
}
</code></pre><h2>.contentTransition(.interpolate)</h2><pre data-language="swift" class="hljs"><code><span class="hljs-type">Text</span>(<span class="hljs-string">"hello world."</span>)
    .font(show ? .largeTitle : .body)
    .fontWeight(show ? .black : .thin)
    .foregroundColor(show ? .yellow : .red)
    .contentTransition(.interpolate)
    .onTapGesture {
        withAnimation(.easeInOut(duration: <span class="hljs-number">1</span>)) {
            show.toggle()
        }
    }
</code></pre><h2>.toolbar(.hidden, for: .navigationBar)</h2><pre data-language="swift" class="hljs"><code><span class="hljs-type">NavigationStack</span> {
    <span class="hljs-type">Text</span>(<span class="hljs-string">"hello world."</span>)
        .navigationTitle(<span class="hljs-string">"Title"</span>)
        .toolbarBackground(<span class="hljs-type">Color</span>.yellow, <span class="hljs-keyword">for</span>: .navigationBar)
        .toolbar(.hidden, <span class="hljs-keyword">for</span>: .navigationBar)
}
</code></pre><h2>MagnificationGesture</h2><pre data-language="swift" class="hljs"><code><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ContentView</span>: <span class="hljs-title">View</span> </span>{
    @<span class="hljs-type">State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> magnification: <span class="hljs-type">CGFloat</span> = <span class="hljs-number">1.0</span>
    
    <span class="hljs-keyword">var</span> body: some <span class="hljs-type">View</span> {
        <span class="hljs-keyword">let</span> magnificationGesture =
        <span class="hljs-type">MagnificationGesture</span>(minimumScaleDelta: <span class="hljs-number">0</span>)
            .onChanged({ value <span class="hljs-keyword">in</span>
                <span class="hljs-keyword">self</span>.magnification = value
            })
            .onEnded({ <span class="hljs-number">_</span> <span class="hljs-keyword">in</span>
                <span class="hljs-built_in">print</span>(<span class="hljs-string">"Gesture Ended"</span>)
            })
        
        <span class="hljs-keyword">return</span> <span class="hljs-type">Image</span>(systemName: <span class="hljs-string">"hand.point.right.fill"</span>)
            .resizable()
            .font(.largeTitle)
            .scaleEffect(magnification)
            .gesture(magnificationGesture)
            .frame(width: <span class="hljs-number">100</span>, height: <span class="hljs-number">90</span>)
    }
}
</code></pre><pre data-language="swift" class="hljs"><code><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">MagnificationGestureView</span>: <span class="hljs-title">View</span> </span>{
    @<span class="hljs-type">GestureState</span> <span class="hljs-keyword">var</span> magnifyBy = <span class="hljs-number">1.0</span>

    <span class="hljs-keyword">var</span> magnification: some <span class="hljs-type">Gesture</span> {
        <span class="hljs-type">MagnificationGesture</span>()
            .updating($magnifyBy) { currentState, gestureState, transaction <span class="hljs-keyword">in</span>
                gestureState = currentState
            }
    }

    <span class="hljs-keyword">var</span> body: some <span class="hljs-type">View</span> {
        <span class="hljs-type">Circle</span>()
            .frame(width: <span class="hljs-number">100</span>, height: <span class="hljs-number">100</span>)
            .scaleEffect(magnifyBy)
            .gesture(magnification)
    }
}
</code></pre><h2>transition</h2><pre data-language="swift" class="hljs"><code>.transition(.scale)
.transition(.move(edge: .top))
.transition(<span class="hljs-type">AnyTransition</span>.opacity.combined(with: .move(edge: .top)))
.transition(.fadeAndMove)
.transition(.asymmetric(insertion: .scale, removal: .slide))

<span class="hljs-class"><span class="hljs-keyword">extension</span> <span class="hljs-title">AnyTransition</span> </span>{
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">var</span> fadeAndMove: <span class="hljs-type">AnyTransition</span> {
        <span class="hljs-type">AnyTransition</span>.opacity.combined(with: .move(edge: .top))
    }
}
</code></pre><h2>ToggleStyle</h2><pre data-language="swift" class="hljs"><code><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ContentView</span>: <span class="hljs-title">View</span> </span>{
    @<span class="hljs-type">State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> active: <span class="hljs-type">Bool</span> = <span class="hljs-literal">false</span>
    
    <span class="hljs-keyword">var</span> body: some <span class="hljs-type">View</span> {
        <span class="hljs-type">Toggle</span>(isOn: $active, label: {
            <span class="hljs-type">Text</span>(<span class="hljs-string">"Active"</span>)
        })
        .toggleStyle(<span class="hljs-type">PowerToggleStyle</span>())
    }
}

<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CheckmarkToggleStyle</span>: <span class="hljs-title">ToggleStyle</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makeBody</span><span class="hljs-params">(configuration: Configuration)</span></span> -&gt; some <span class="hljs-type">View</span> {
        <span class="hljs-type">HStack</span> {
            configuration.label
            <span class="hljs-type">Spacer</span>()
            <span class="hljs-type">Rectangle</span>()
                .foregroundColor(configuration.isOn ? .green : .gray)
                .frame(width: <span class="hljs-number">51</span>, height: <span class="hljs-number">31</span>, alignment: .center)
                .overlay(
                    <span class="hljs-type">Circle</span>()
                        .foregroundColor(.white)
                        .padding(.all, <span class="hljs-number">3</span>)
                        .overlay(
                            <span class="hljs-type">Image</span>(systemName: configuration.isOn ? <span class="hljs-string">"checkmark"</span> : <span class="hljs-string">"xmark"</span>)
                                .resizable()
                                .aspectRatio(contentMode: .fit)
                                .font(<span class="hljs-type">Font</span>.title.weight(.black))
                                .frame(width: <span class="hljs-number">8</span>, height: <span class="hljs-number">8</span>, alignment: .center)
                                .foregroundColor(configuration.isOn ? .green : .gray)
                        )
                        .offset(x: configuration.isOn ? <span class="hljs-number">11</span> : -<span class="hljs-number">11</span>, y: <span class="hljs-number">0</span>)
                        .animation(<span class="hljs-type">Animation</span>.linear(duration: <span class="hljs-number">0.1</span>), value: configuration.isOn)
                    
                ).cornerRadius(<span class="hljs-number">20</span>)
                .onTapGesture { configuration.isOn.toggle() }
        }
    }
}

<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">PowerToggleStyle</span>: <span class="hljs-title">ToggleStyle</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makeBody</span><span class="hljs-params">(configuration: Configuration)</span></span> -&gt; some <span class="hljs-type">View</span> {
        <span class="hljs-type">HStack</span> {
            configuration.label
            <span class="hljs-type">Spacer</span>()
            <span class="hljs-type">Rectangle</span>()
                .foregroundColor(configuration.isOn ? .green : .gray)
                .frame(width: <span class="hljs-number">51</span>, height: <span class="hljs-number">31</span>, alignment: .center)
                .overlay(
                    <span class="hljs-type">Circle</span>()
                        .foregroundColor(.white)
                        .padding(.all, <span class="hljs-number">3</span>)
                        .overlay(
                            <span class="hljs-type">GeometryReader</span> { geo <span class="hljs-keyword">in</span>
                                <span class="hljs-type">Path</span> { p <span class="hljs-keyword">in</span>
                                    <span class="hljs-keyword">if</span> !configuration.isOn {
                                        p.addRoundedRect(<span class="hljs-keyword">in</span>: <span class="hljs-type">CGRect</span>(x: <span class="hljs-number">20</span>, y: <span class="hljs-number">10</span>, width: <span class="hljs-number">10.5</span>, height: <span class="hljs-number">10.5</span>), cornerSize: <span class="hljs-type">CGSize</span>(width: <span class="hljs-number">7.5</span>, height: <span class="hljs-number">7.5</span>), style: .circular, transform: .identity)
                                    } <span class="hljs-keyword">else</span> {
                                        p.move(to: <span class="hljs-type">CGPoint</span>(x: <span class="hljs-number">51</span>/<span class="hljs-number">2</span>, y: <span class="hljs-number">10</span>))
                                        p.addLine(to: <span class="hljs-type">CGPoint</span>(x: <span class="hljs-number">51</span>/<span class="hljs-number">2</span>, y: <span class="hljs-number">31</span>-<span class="hljs-number">10</span>))
                                    }
                                }.stroke(configuration.isOn ? <span class="hljs-type">Color</span>.green : <span class="hljs-type">Color</span>.gray, lineWidth: <span class="hljs-number">2</span>)
                            }
                        )
                        .offset(x: configuration.isOn ? <span class="hljs-number">11</span> : -<span class="hljs-number">11</span>, y: <span class="hljs-number">0</span>)
                        .animation(<span class="hljs-type">Animation</span>.linear(duration: <span class="hljs-number">0.1</span>), value: configuration.isOn)
                    
                ).cornerRadius(<span class="hljs-number">20</span>)
                .onTapGesture { configuration.isOn.toggle() }
        }
    }
}

<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ImageToggleStyle</span>: <span class="hljs-title">ToggleStyle</span> </span>{
    <span class="hljs-keyword">var</span> onImageName: <span class="hljs-type">String</span>
    <span class="hljs-keyword">var</span> offImageName: <span class="hljs-type">String</span>
    
    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makeBody</span><span class="hljs-params">(configuration: Configuration)</span></span> -&gt; some <span class="hljs-type">View</span> {
        <span class="hljs-type">HStack</span> {
            configuration.label
            <span class="hljs-type">Spacer</span>()
            <span class="hljs-type">Image</span>(configuration.isOn ? onImageName : offImageName)
                .resizable()
                .aspectRatio(contentMode: .fill)
                .frame(width: <span class="hljs-number">51</span>, height: <span class="hljs-number">31</span>, alignment: .center)
                .overlay(
                    <span class="hljs-type">Circle</span>()
                        .foregroundColor(.white)
                        .padding(.all, <span class="hljs-number">3</span>)
                        .offset(x: configuration.isOn ? <span class="hljs-number">11</span> : -<span class="hljs-number">11</span>, y: <span class="hljs-number">0</span>)
                        .animation(<span class="hljs-type">Animation</span>.linear(duration: <span class="hljs-number">0.1</span>), value: configuration.isOn)
                ).cornerRadius(<span class="hljs-number">20</span>)
                .onTapGesture { configuration.isOn.toggle() }
        }
    }
}
</code></pre><h2>ViewModifier</h2><pre data-language="swift" class="hljs"><code><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ContentView</span>: <span class="hljs-title">View</span> </span>{
    <span class="hljs-keyword">var</span> body: some <span class="hljs-type">View</span> {
        <span class="hljs-type">Text</span>(<span class="hljs-string">"Active"</span>)
            .standardTitle()
    }
}

<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">StandardTitle</span>: <span class="hljs-title">ViewModifier</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">body</span><span class="hljs-params">(content: Content)</span></span> -&gt; some <span class="hljs-type">View</span> {
        content
            .font(.largeTitle)
            .padding()
            .border(<span class="hljs-type">Color</span>.gray, width: <span class="hljs-number">2</span>)
            .background(<span class="hljs-type">Color</span>.white
                .shadow(color: <span class="hljs-type">Color</span>.black, radius: <span class="hljs-number">5</span>, x: <span class="hljs-number">0</span>, y: <span class="hljs-number">5</span>))
    }
}

<span class="hljs-class"><span class="hljs-keyword">extension</span> <span class="hljs-title">View</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">standardTitle</span><span class="hljs-params">()</span></span> -&gt; some <span class="hljs-type">View</span> {
        <span class="hljs-keyword">self</span>.modifier(<span class="hljs-type">StandardTitle</span>())
    }
}
</code></pre><h2>@ViewBuilder</h2><pre data-language="swift" class="hljs"><code><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">MyVStack</span>&lt;<span class="hljs-title">Content</span>: <span class="hljs-title">View</span>&gt;: <span class="hljs-title">View</span> </span>{
    <span class="hljs-keyword">let</span> content: () -&gt; <span class="hljs-type">Content</span>
    <span class="hljs-keyword">init</span>(@<span class="hljs-type">ViewBuilder</span> content: @escaping () -&gt; <span class="hljs-type">Content</span>) {
        <span class="hljs-keyword">self</span>.content = content
    }
    
    <span class="hljs-keyword">var</span> body: some <span class="hljs-type">View</span> {
        <span class="hljs-type">VStack</span>(spacing: <span class="hljs-number">10</span>) {
            content()
        }
        .font(.largeTitle)
    }
}
</code></pre><h2>horizontalSizeClass</h2><pre data-language="swift" class="hljs"><code><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ContentView</span>: <span class="hljs-title">View</span> </span>{
    @<span class="hljs-type">Environment</span>(\.horizontalSizeClass) <span class="hljs-keyword">var</span> horizontalSizeClass
    
    <span class="hljs-keyword">var</span> body: some <span class="hljs-type">View</span> {
        <span class="hljs-keyword">if</span> horizontalSizeClass == .compact {
            <span class="hljs-type">VStack</span> {
                <span class="hljs-type">Text</span>(<span class="hljs-string">"竖屏"</span>)
                <span class="hljs-type">Text</span>(<span class="hljs-string">"shu ping"</span>)
            }
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-type">HStack</span> {
                <span class="hljs-type">Text</span>(<span class="hljs-string">"横屏"</span>)
                <span class="hljs-type">Text</span>(<span class="hljs-string">"heng ping"</span>)
            }
        }
    }
}
</code></pre><h2>@AppStorage</h2><pre data-language="swift" class="hljs"><code><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">UserName</span>: <span class="hljs-title">Encodable</span>, <span class="hljs-title">Decodable</span> </span>{
    <span class="hljs-keyword">var</span> firstName: <span class="hljs-type">String</span>
    <span class="hljs-keyword">var</span> secondName: <span class="hljs-type">String</span>
}

<span class="hljs-keyword">var</span> username = <span class="hljs-type">UserName</span>(firstName: <span class="hljs-string">"Mark"</span>, secondName: <span class="hljs-string">"Wilson"</span>)

@<span class="hljs-type">AppStorage</span>(<span class="hljs-string">"username"</span>) <span class="hljs-keyword">var</span> namestore: <span class="hljs-type">Data</span> = <span class="hljs-type">Data</span>()

<span class="hljs-keyword">let</span> encoder = <span class="hljs-type">JSONEncoder</span>() 
<span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> data = <span class="hljs-keyword">try</span>? encoder.encode(username) {
    namestore = data
}

<span class="hljs-keyword">let</span> decoder = <span class="hljs-type">JSONDecoder</span>()
<span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> name = <span class="hljs-keyword">try</span>? decoder.decode(<span class="hljs-type">UserName</span>.<span class="hljs-keyword">self</span>, from: namestore) {
    username = name
}
</code></pre><pre data-language="swift" class="hljs"><code>@<span class="hljs-type">AppStorage</span>(<span class="hljs-string">"myimage"</span>) <span class="hljs-keyword">var</span> imagestore: <span class="hljs-type">Data</span> = <span class="hljs-type">Data</span>()
 
<span class="hljs-keyword">var</span> image = <span class="hljs-type">UIImage</span>(named: <span class="hljs-string">"profilephoto"</span>)

<span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> data = image!.pngData() {
    imagestore = data
}

<span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> decodedImage: <span class="hljs-type">UIImage</span> = <span class="hljs-type">UIImage</span>(data: imagestore) {
     image = decodedImage
}
</code></pre><h2>时间间隔</h2><pre data-language="swift" class="hljs"><code><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">minutesBetween</span><span class="hljs-params">(<span class="hljs-number">_</span> start: Date, and end: Date)</span></span> -&gt; <span class="hljs-type">Int</span> {
    <span class="hljs-keyword">let</span> diff = <span class="hljs-type">Calendar</span>.current.dateComponents([.minute], from: start, to: end)
    <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> minute = diff.minute <span class="hljs-keyword">else</span> { <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> }
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(minute)
}
</code></pre><h2>样式文本</h2><pre data-language="swift" class="hljs"><code><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">textWithHashtags</span><span class="hljs-params">(<span class="hljs-number">_</span> text: String, color: Color)</span></span> -&gt; <span class="hljs-type">Text</span> {
    <span class="hljs-keyword">let</span> words = text.<span class="hljs-built_in">split</span>(separator: <span class="hljs-string">" "</span>)
    <span class="hljs-keyword">var</span> output: <span class="hljs-type">Text</span> = <span class="hljs-type">Text</span>(<span class="hljs-string">""</span>)

    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> words {
        <span class="hljs-keyword">if</span> word.hasPrefix(<span class="hljs-string">"#"</span>) { <span class="hljs-comment">// Pick out hash in words</span>
            output = output + <span class="hljs-type">Text</span>(<span class="hljs-string">" "</span>) + <span class="hljs-type">Text</span>(<span class="hljs-type">String</span>(word))
                .foregroundColor(color) <span class="hljs-comment">// Add custom styling here</span>
        } <span class="hljs-keyword">else</span> {
            output = output + <span class="hljs-type">Text</span>(<span class="hljs-string">" "</span>) + <span class="hljs-type">Text</span>(<span class="hljs-type">String</span>(word))
        }
    }
    <span class="hljs-keyword">return</span> output
}

<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ContentView</span>: <span class="hljs-title">View</span> </span>{
    <span class="hljs-keyword">var</span> body: some <span class="hljs-type">View</span> {
        textWithHashtags(<span class="hljs-string">"Here's a quick and easy way to include #hashtag formatting in your #SwiftUI Text Views. Learn how in the #Tutorial here."</span>, color: .red)
            .font(<span class="hljs-type">Font</span>.custom(<span class="hljs-string">"Avenir Next"</span>, size: <span class="hljs-number">20</span>))
            .bold()
            
    }
}
</code></pre><h2>UUID</h2><pre data-language="swift" class="hljs"><code><span class="hljs-keyword">var</span> id = <span class="hljs-type">UUID</span>().uuidString
</code></pre><h2>Spacer不占地儿</h2><pre data-language="swift" class="hljs"><code><span class="hljs-type">Spacer</span>(minLength: <span class="hljs-number">0</span>)
</code></pre><h2>Image 大小</h2><pre data-language="swift" class="hljs"><code>.aspectRatio(contentMode: .fit)
</code></pre><h2>Namespace的使用</h2><pre data-language="swift" class="hljs"><code>@<span class="hljs-type">Namespace</span> <span class="hljs-keyword">var</span> animation <span class="hljs-comment">// 外部声明</span>
<span class="hljs-type">TabButton</span>(title: tab, selected: $selected, animation: animation) <span class="hljs-comment">// 传入</span>

<span class="hljs-keyword">var</span> animation: <span class="hljs-type">Namespace</span>.<span class="hljs-type">ID</span> <span class="hljs-comment">// 内部定义</span>
.matchedGeometryEffect(id: <span class="hljs-string">"image\(item.id)"</span>, <span class="hljs-keyword">in</span>: animation) <span class="hljs-comment">// 使用</span>
</code></pre><h2>ZStack的一种用法</h2><pre data-language="swift" class="hljs"><code>.background(
    <span class="hljs-type">ZStack</span> {
        <span class="hljs-keyword">if</span> selected == title {
            <span class="hljs-type">Color</span>.black
        }
    }
)
</code></pre><h2>好玩的图形</h2><pre data-language="swift" class="hljs"><code><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CustomShape</span>: <span class="hljs-title">Shape</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">path</span><span class="hljs-params">(<span class="hljs-keyword">in</span> rect: CGRect)</span></span> -&gt; <span class="hljs-type">Path</span> {
        <span class="hljs-keyword">return</span> <span class="hljs-type">Path</span> { path <span class="hljs-keyword">in</span>
            <span class="hljs-keyword">let</span> pt1 = <span class="hljs-type">CGPoint</span>(x: rect.width, y: <span class="hljs-number">0</span>)
            <span class="hljs-keyword">let</span> pt2 = <span class="hljs-type">CGPoint</span>(x: <span class="hljs-number">0</span>, y: rect.height - <span class="hljs-number">100</span>)
            <span class="hljs-keyword">let</span> pt3 = <span class="hljs-type">CGPoint</span>(x: <span class="hljs-number">0</span>, y: rect.height)
            <span class="hljs-keyword">let</span> pt4 = <span class="hljs-type">CGPoint</span>(x: rect.width, y: rect.height)
            path.move(to: pt4)
            path.addArc(tangent1End: pt1, tangent2End: pt2, radius: <span class="hljs-number">20</span>)
            path.addArc(tangent1End: pt2, tangent2End: pt3, radius: <span class="hljs-number">20</span>)
            path.addArc(tangent1End: pt3, tangent2End: pt4, radius: <span class="hljs-number">20</span>)
            path.addArc(tangent1End: pt4, tangent2End: pt1, radius: <span class="hljs-number">20</span>)
        }
    }
}
</code></pre><h2>最后一个不加哦</h2><pre data-language="swift" class="hljs"><code><span class="hljs-keyword">if</span> tabs.last != tab {
    <span class="hljs-type">Spacer</span>(minLength: <span class="hljs-number">0</span>)
}
</code></pre><h2>LazyVGrid</h2><pre data-language="swift" class="hljs"><code><span class="hljs-type">LazyVGrid</span>(columns: <span class="hljs-type">Array</span>(repeating: <span class="hljs-type">GridItem</span>(.flexible(), spacing: <span class="hljs-number">20</span>), <span class="hljs-built_in">count</span>: <span class="hljs-number">2</span>), spacing: <span class="hljs-number">25</span>, content: {
</code></pre><h2>withAnimation</h2><pre data-language="swift" class="hljs"><code>withAnimation(.spring()) {

}
</code></pre><h2>安全区铺色</h2><pre data-language="swift" class="hljs"><code>.background(
    <span class="hljs-type">Color</span>.white
        .ignoresSafeArea()
)
</code></pre><h2>异形底色</h2><pre data-language="swift" class="hljs"><code>.background(
    <span class="hljs-type">Color</span>.orange
        .clipShape(<span class="hljs-type">CustomShape</span>())
)
</code></pre><h2>多个选项，勾选的实现方法，ZStack比overlay好用</h2><pre data-language="swift" class="hljs"><code><span class="hljs-type">ForEach</span>(<span class="hljs-number">1</span>...<span class="hljs-number">4</span>, id: \.<span class="hljs-keyword">self</span>) { index <span class="hljs-keyword">in</span>
    <span class="hljs-type">ZStack</span> {
        <span class="hljs-type">Color</span>(<span class="hljs-string">"p\(index + 1)"</span>)
            .clipShape(<span class="hljs-type">Circle</span>())
            .frame(width: <span class="hljs-number">45</span>, height: <span class="hljs-number">45</span>)
            .onTapGesture {
                withAnimation(.spring()) {
                    selectedColor = <span class="hljs-type">Color</span>(<span class="hljs-string">"p\(index + 1)"</span>)
                }
            }
        <span class="hljs-keyword">if</span> selectedColor == <span class="hljs-type">Color</span>(<span class="hljs-string">"p\(index + 1)"</span>) {
            <span class="hljs-type">Image</span>(systemName: <span class="hljs-string">"checkmark"</span>)
                .foregroundColor(.black)
        }
    }
}
</code></pre><h2>显示/隐藏，height的原始值设置nil即可</h2><pre data-language="swift" class="hljs"><code>.frame(height: loadContent ? <span class="hljs-literal">nil</span> : <span class="hljs-number">0</span>)
.opacity(loadContent ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>)
</code></pre><h2>圆角矩形框</h2><pre data-language="swift" class="hljs"><code>.background(
    <span class="hljs-type">RoundedRectangle</span>(cornerRadius: <span class="hljs-number">15</span>)
        .stroke(<span class="hljs-type">Color</span>.black, lineWidth: <span class="hljs-number">1</span>)
)
</code></pre><h2>view出现时触发</h2><pre data-language="swift" class="hljs"><code>.onAppear {
    withAnimation(<span class="hljs-type">Animation</span>.spring().delay(<span class="hljs-number">0.45</span>)) {
        loadContent.toggle()
    }
}
</code></pre><h2>在某种条件下使用scrollview</h2><pre data-language="swift" class="hljs"><code><span class="hljs-type">ScrollView</span>(<span class="hljs-type">UIScreen</span>.main.bounds.height &lt; <span class="hljs-number">750</span> ? .vertical : .<span class="hljs-keyword">init</span>(), content: {
})
</code></pre><h2>动画技术</h2><ul><li>timingCurve</li></ul><pre data-language="swift" class="hljs"><code><span class="hljs-comment">// If you need fine control over the animation curve’s shape, you can use the ==timingCurve(_:_:_:_)== type method. </span>
</code></pre><ul><li>Creating spring animations</li></ul><pre data-language="swift" class="hljs"><code>.animation(
  .interpolatingSpring(
    mass: <span class="hljs-number">1</span>,
    stiffness: <span class="hljs-number">100</span>,
    damping: <span class="hljs-number">10</span>,
    initialVelocity: <span class="hljs-number">0</span>
    ) 
)
<span class="hljs-comment">/* 
The parameters you pass are the same mentioned above:
 • mass: Controls how long the system “bounces”.
 • stiffness: Controls the speed of the initial movement.
 • damping: Controls how fast the system slows down and stops. 
 • initialVelocity: Gives an extra initial motion.
 */</span>
 ```
 
 ```swift
.animation(
  .spring(
    response: <span class="hljs-number">0.55</span>,
    dampingFraction: <span class="hljs-number">0.45</span>,
    blendDuration: <span class="hljs-number">0</span>
) )
</code></pre><ul><li>延时</li></ul><pre data-language="swift" class="hljs"><code>.animation(<span class="hljs-type">Animation</span>.easeInOut.delay(<span class="hljs-type">Double</span>(history.day) * <span class="hljs-number">0.1</span>))
</code></pre><ul><li>封装Animation</li></ul><pre data-language="swift" class="hljs"><code><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">barAnimation</span><span class="hljs-params">(<span class="hljs-number">_</span> barNumber: Int)</span></span> -&gt; <span class="hljs-type">Animation</span> {
  <span class="hljs-keyword">return</span> <span class="hljs-type">Animation</span>.easeInOut.delay(<span class="hljs-type">Double</span>(barNumber) * <span class="hljs-number">0.1</span>)
}

.animation(barAnimation(history.day))
</code></pre><pre data-language="swift" class="hljs"><code><span class="hljs-keyword">var</span> walkingAnimation: <span class="hljs-type">Animation</span> {
  <span class="hljs-type">Animation</span>
    .linear(duration: <span class="hljs-number">3.0</span>)
    .repeatForever(autoreverses: <span class="hljs-literal">false</span>)
}

.animation(walkingAnimation)
</code></pre><ul><li>Transition</li></ul><pre data-language="swift" class="hljs"><code><span class="hljs-type">Group</span> {
  <span class="hljs-keyword">if</span> showTerminal {
    <span class="hljs-type">Text</span>(<span class="hljs-string">"Hide Terminal Map"</span>)
  } <span class="hljs-keyword">else</span> {
    <span class="hljs-type">Text</span>(<span class="hljs-string">"Show Terminal Map"</span>)
  }
}
.transition(.slide)

.transition(.move(edge: .bottom))

<span class="hljs-class"><span class="hljs-keyword">extension</span> <span class="hljs-title">AnyTransition</span> </span>{
  <span class="hljs-keyword">static</span> <span class="hljs-keyword">var</span> buttonNameTransition: <span class="hljs-type">AnyTransition</span> {
    <span class="hljs-type">AnyTransition</span>.slide
  }
}

<span class="hljs-keyword">if</span> showTerminal {
  <span class="hljs-type">FlightTerminalMap</span>(flight: flight)
    .transition(.buttonNameTransition)
}
</code></pre><ul><li>async transiton</li></ul><pre data-language="swift" class="hljs"><code><span class="hljs-class"><span class="hljs-keyword">extension</span> <span class="hljs-title">AnyTransition</span> </span>{
  <span class="hljs-keyword">static</span> <span class="hljs-keyword">var</span> buttonNameTransition: <span class="hljs-type">AnyTransition</span> {
    <span class="hljs-keyword">let</span> insertion = <span class="hljs-type">AnyTransition</span>.move(edge: .trailing)
      .combined(with: .opacity)
    <span class="hljs-keyword">let</span> removal = <span class="hljs-type">AnyTransition</span>.scale(scale: <span class="hljs-number">0.0</span>)
      .combined(with: .opacity)
    <span class="hljs-keyword">return</span> .asymmetric(insertion: insertion, removal: removal)
  }
}
</code></pre><ul><li>Hero animation</li></ul><pre data-language="swift" class="hljs"><code>.matchedGeometryEffect
</code></pre><h2>异步任务的Button</h2><pre data-language="swift" class="hljs"><code><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AsyncButton</span>&lt;<span class="hljs-title">Content</span>: <span class="hljs-title">View</span>&gt;: <span class="hljs-title">View</span> </span>{
    <span class="hljs-keyword">var</span> isComplete: <span class="hljs-type">Bool</span>
    <span class="hljs-keyword">let</span> action: ()-&gt;()
    <span class="hljs-keyword">let</span> content: <span class="hljs-type">Content</span>
    
    @<span class="hljs-type">State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> inProgress: <span class="hljs-type">Bool</span>
    
    <span class="hljs-keyword">init</span>(isComplete: <span class="hljs-type">Bool</span>, action: @escaping ()-&gt;(), @<span class="hljs-type">ViewBuilder</span> label: ()-&gt;<span class="hljs-type">Content</span>) {
        <span class="hljs-keyword">self</span>.action = action
        <span class="hljs-keyword">self</span>.isComplete = isComplete
        <span class="hljs-keyword">self</span>.content = label()
        <span class="hljs-keyword">self</span>._inProgress = <span class="hljs-type">State</span>.<span class="hljs-keyword">init</span>(initialValue: <span class="hljs-literal">false</span>)
    }
    
    <span class="hljs-keyword">var</span> body: some <span class="hljs-type">View</span> {
        <span class="hljs-type">Button</span>(action: {
            <span class="hljs-keyword">if</span> !inProgress { action() }
            withAnimation(<span class="hljs-type">Animation</span>.easeInOut(duration: <span class="hljs-number">0.4</span>)) {
                inProgress = <span class="hljs-literal">true</span>
            }

        }, label: {
            <span class="hljs-type">VStack</span>(alignment: .trailing) {
                <span class="hljs-keyword">if</span> inProgress &amp;&amp; !isComplete {
                    <span class="hljs-type">ProgressView</span>()
                        .foregroundColor(.white)
                } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> isComplete {
                    <span class="hljs-type">Image</span>(systemName: <span class="hljs-string">"checkmark"</span>)
                        .resizable()
                        .frame(width: <span class="hljs-number">15</span>, height: <span class="hljs-number">15</span>, alignment: .center)
                        .foregroundColor(.white)
                } <span class="hljs-keyword">else</span> {
                    content
                }
            }
            .frame(maxWidth: isComplete || inProgress ? <span class="hljs-number">50</span> : .infinity, maxHeight: isComplete  || inProgress ? <span class="hljs-number">50</span> : <span class="hljs-literal">nil</span>, alignment: .center)
            .padding(.vertical, isComplete  || inProgress ? <span class="hljs-number">0</span> : <span class="hljs-number">12</span>)
            .foregroundColor(.white)
            .background(<span class="hljs-type">Color</span>.green)
            .cornerRadius(isComplete || inProgress ? <span class="hljs-number">25</span> : <span class="hljs-number">8</span>)
            .font(<span class="hljs-type">Font</span>.body.weight(.semibold))
            .padding(.all, <span class="hljs-number">20</span>)
        })
    }
}
    
<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ContentView</span>: <span class="hljs-title">View</span> </span>{
    @<span class="hljs-type">State</span> <span class="hljs-keyword">var</span> complete: <span class="hljs-type">Bool</span> = <span class="hljs-literal">false</span>
    @<span class="hljs-type">State</span> <span class="hljs-keyword">var</span> inProgress: <span class="hljs-type">Bool</span> = <span class="hljs-literal">false</span>
    
    <span class="hljs-keyword">var</span> body: some <span class="hljs-type">View</span> {
        <span class="hljs-type">AsyncButton</span>(isComplete: complete, action: {
            inProgress = <span class="hljs-literal">true</span>
            <span class="hljs-comment">// Start Async Task (Download, Submit, etc)</span>
            <span class="hljs-type">DispatchQueue</span>.main.asyncAfter(deadline: .now() + <span class="hljs-number">2</span>) {
                withAnimation {
                    complete = <span class="hljs-literal">true</span>
                }
            }
        }) {
            <span class="hljs-type">Text</span>(complete || inProgress ? <span class="hljs-string">""</span> : <span class="hljs-string">"Submit"</span>)
        }
    }
}
</code></pre><h2>菜单/X按钮的动画实现</h2><pre data-language="swift" class="hljs"><code><span class="hljs-type">Button</span>(action: {
    withAnimation(.spring()){
        showMenu.toggle()
    }
}, label: {
    <span class="hljs-type">VStack</span> (spacing: <span class="hljs-number">5</span>){
        <span class="hljs-type">Capsule</span>()
            .fill(showMenu ? <span class="hljs-type">Color</span>.white : <span class="hljs-type">Color</span>.primary)
            .frame(width: <span class="hljs-number">30</span>, height: <span class="hljs-number">3</span>)
            .rotationEffect(.<span class="hljs-keyword">init</span>(degrees: showMenu ? -<span class="hljs-number">50</span> : <span class="hljs-number">0</span>))
            .offset(x: showMenu ? <span class="hljs-number">2</span> : <span class="hljs-number">0</span>, y: showMenu ? <span class="hljs-number">9</span> : <span class="hljs-number">0</span>)
        <span class="hljs-type">VStack</span> (spacing:<span class="hljs-number">5</span>) {
            <span class="hljs-type">Capsule</span>()
                .fill(showMenu ? <span class="hljs-type">Color</span>.white : <span class="hljs-type">Color</span>.primary)
                .frame(width: <span class="hljs-number">30</span>, height: <span class="hljs-number">3</span>)
            <span class="hljs-type">Capsule</span>()
                .fill(showMenu ? <span class="hljs-type">Color</span>.white : <span class="hljs-type">Color</span>.primary)
                .frame(width: <span class="hljs-number">30</span>, height: <span class="hljs-number">3</span>)
                .offset(y: showMenu ? -<span class="hljs-number">8</span> : <span class="hljs-number">0</span>)
        }
        .rotationEffect(.<span class="hljs-keyword">init</span>(degrees: showMenu ? <span class="hljs-number">50</span> : <span class="hljs-number">0</span>))
    }
})
.padding()
</code></pre><h2>alignmentGuide的使用方法</h2><pre data-language="swift" class="hljs"><code><span class="hljs-type">VStack</span>(alignment: .leading) {
    <span class="hljs-type">Rectangle</span>()
        .foregroundColor(<span class="hljs-type">Color</span>.green)
        .frame(width: <span class="hljs-number">120</span>, height: <span class="hljs-number">50</span>)
    <span class="hljs-type">Rectangle</span>()
        .foregroundColor(<span class="hljs-type">Color</span>.red)
        .alignmentGuide(.leading, computeValue: { d <span class="hljs-keyword">in</span> <span class="hljs-number">120.0</span> })
        .frame(width: <span class="hljs-number">200</span>, height: <span class="hljs-number">50</span>)
    <span class="hljs-type">Rectangle</span>()
        .foregroundColor(<span class="hljs-type">Color</span>.blue)
        .frame(width: <span class="hljs-number">180</span>, height: <span class="hljs-number">50</span>)
} 

<span class="hljs-comment">// .alignmentGuide(.leading, computeValue: { d in d.width / 3 }) </span>
<span class="hljs-comment">// .alignmentGuide(.leading, computeValue: { d in d[HorizontalAlignment.trailing] + 20})</span>
</code></pre><h2>AnimatableModifier 废弃</h2><blockquote><p>用Animatable, ViewModifier</p></blockquote><pre data-language="swift" class="hljs"><code><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">NumberView</span>: <span class="hljs-title">Animatable</span>, <span class="hljs-title">ViewModifier</span> </span>{
    <span class="hljs-keyword">var</span> number: <span class="hljs-type">Int</span>
    
    <span class="hljs-keyword">var</span> animatableData: <span class="hljs-type">CGFloat</span> {
        <span class="hljs-keyword">get</span> { <span class="hljs-type">CGFloat</span>(number) }
        <span class="hljs-keyword">set</span> { number = <span class="hljs-type">Int</span>(newValue) }
    }
    
    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">body</span><span class="hljs-params">(content: Content)</span></span> -&gt; some <span class="hljs-type">View</span> {
        <span class="hljs-type">Text</span>(<span class="hljs-type">String</span>(number))
    }
}
</code></pre><h2>生命周期</h2><pre data-language="swift" class="hljs"><code><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LifecycleDemoApp</span>: <span class="hljs-title">App</span> </span>{
    @<span class="hljs-type">Environment</span>(\.scenePhase) <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> scenePhase
    
    <span class="hljs-keyword">var</span> body: some <span class="hljs-type">Scene</span> {
        <span class="hljs-type">WindowGroup</span> {
            <span class="hljs-type">ContentView</span>()
        }
        .onChange(of: scenePhase, perform: { phase <span class="hljs-keyword">in</span>
                <span class="hljs-keyword">switch</span> phase {
                    <span class="hljs-keyword">case</span> .active:
                        <span class="hljs-built_in">print</span>(<span class="hljs-string">"Active"</span>)
                    <span class="hljs-keyword">case</span> .inactive:
                        <span class="hljs-built_in">print</span>(<span class="hljs-string">"Inactive"</span>)
                    <span class="hljs-keyword">case</span> .background:
                        <span class="hljs-built_in">print</span>(<span class="hljs-string">"Background"</span>)
                    <span class="hljs-keyword">default</span>:
                        <span class="hljs-built_in">print</span>(<span class="hljs-string">"Unknown scenephase"</span>)
                }
            })
    }
}
</code></pre><h2>ContentShapeKinds有什么用？</h2><p><a href="https://stackoverflow.com/questions/62687224/swiftui-image-clipped-to-shape-has-transparent-padding-in-context-menu">参考</a></p><pre data-language="swift" class="hljs"><code><span class="hljs-type">Image</span>(<span class="hljs-string">"leaf"</span>)
    .resizable()
    .aspectRatio(contentMode: .fill)
    .frame(width: <span class="hljs-number">300</span>, height: <span class="hljs-number">300</span>)
    .clipShape(<span class="hljs-type">Circle</span>())
    .contentShape(<span class="hljs-type">ContentShapeKinds</span>.contextMenuPreview, <span class="hljs-type">Circle</span>())
    .contextMenu {
        <span class="hljs-type">Text</span>(<span class="hljs-string">"Menu Item"</span>)
    }
</code></pre><h2>contextMenu的用法</h2><pre data-language="swift" class="hljs"><code><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ContentView</span>: <span class="hljs-title">View</span> </span>{
    @<span class="hljs-type">State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> foregroundColor: <span class="hljs-type">Color</span> = <span class="hljs-type">Color</span>.black
    @<span class="hljs-type">State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> backgroundColor: <span class="hljs-type">Color</span> = <span class="hljs-type">Color</span>.white
    
    <span class="hljs-keyword">var</span> body: some <span class="hljs-type">View</span> {
        <span class="hljs-type">Text</span>(<span class="hljs-string">"Hello, world!"</span>)
            .font(.largeTitle)
            .padding()
            .foregroundColor(foregroundColor)
            .background(backgroundColor)
            .contextMenu {
                <span class="hljs-type">Button</span>(action: {
                    <span class="hljs-keyword">self</span>.foregroundColor = .black
                    <span class="hljs-keyword">self</span>.backgroundColor = .white
                }) {
                    <span class="hljs-type">Text</span>(<span class="hljs-string">"Normal Colors"</span>)
                    <span class="hljs-type">Image</span>(systemName: <span class="hljs-string">"paintbrush"</span>)
                }
                 
                <span class="hljs-type">Button</span>(action: {
                    <span class="hljs-keyword">self</span>.foregroundColor = .white
                    <span class="hljs-keyword">self</span>.backgroundColor = .black
                }) {
                    <span class="hljs-type">Text</span>(<span class="hljs-string">"Inverted Colors"</span>)
                    <span class="hljs-type">Image</span>(systemName: <span class="hljs-string">"paintbrush.fill"</span>)
                }
            }
    }
}
</code></pre><h2>@GestureState</h2><ul><li>三个例子</li><li>并使用了如下两种多手势组合使用的方法<ul><li>同时：.simultaneously(with: DragGesture())</li><li>排队：.sequenced(before: DragGesture())</li></ul></li></ul><pre data-language="swift" class="hljs"><code><span class="hljs-keyword">import</span> SwiftUI

<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ContentView_testGestureState1</span>: <span class="hljs-title">View</span> </span>{
    @<span class="hljs-type">GestureState</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> offset: <span class="hljs-type">CGSize</span> = .zero
    
    <span class="hljs-keyword">var</span> body: some <span class="hljs-type">View</span> {
        <span class="hljs-keyword">let</span> drag = <span class="hljs-type">DragGesture</span>()
            .updating($offset) { dragValue, state, transaction <span class="hljs-keyword">in</span>
                state = dragValue.translation
            }
        
        <span class="hljs-keyword">return</span> <span class="hljs-type">Image</span>(systemName: <span class="hljs-string">"hand.point.right.fill"</span>)
            .font(.largeTitle)
            .offset(offset)
            .gesture(drag)
    }
}

<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ContentView_testGestureState2</span>: <span class="hljs-title">View</span> </span>{
    @<span class="hljs-type">GestureState</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> offset: <span class="hljs-type">CGSize</span> = .zero
    @<span class="hljs-type">GestureState</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> longPress: <span class="hljs-type">Bool</span> = <span class="hljs-literal">false</span>
    
    <span class="hljs-keyword">var</span> body: some <span class="hljs-type">View</span> {
        <span class="hljs-keyword">let</span> longPressAndDrag = <span class="hljs-type">LongPressGesture</span>(minimumDuration: <span class="hljs-number">1.0</span>)
            .updating($longPress) { value, state, transition <span class="hljs-keyword">in</span>
                state = value
            }
            .simultaneously(with: <span class="hljs-type">DragGesture</span>())
            .updating($offset) { value, state, transaction <span class="hljs-keyword">in</span>
                state = value.second?.translation ?? .zero
            }
        
        <span class="hljs-keyword">return</span> <span class="hljs-type">Image</span>(systemName: <span class="hljs-string">"hand.point.right.fill"</span>)
            .foregroundColor(longPress ? <span class="hljs-type">Color</span>.red : <span class="hljs-type">Color</span>.blue)
            .font(.largeTitle)
            .offset(offset)
            .gesture(longPressAndDrag)
    }
}

<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ContentView_testGestureState3</span>: <span class="hljs-title">View</span> </span>{
    @<span class="hljs-type">GestureState</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> offset: <span class="hljs-type">CGSize</span> = .zero
    @<span class="hljs-type">State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> dragEnabled: <span class="hljs-type">Bool</span> = <span class="hljs-literal">false</span>
    
    <span class="hljs-keyword">var</span> body: some <span class="hljs-type">View</span> {
        <span class="hljs-keyword">let</span> longPressBeforeDrag = <span class="hljs-type">LongPressGesture</span>(minimumDuration: <span class="hljs-number">2.0</span>)
            .onEnded( { <span class="hljs-number">_</span> <span class="hljs-keyword">in</span>
                <span class="hljs-keyword">self</span>.dragEnabled = <span class="hljs-literal">true</span>
            })
            .sequenced(before: <span class="hljs-type">DragGesture</span>())
            .updating($offset) { value, state, transaction <span class="hljs-keyword">in</span>
                <span class="hljs-keyword">switch</span> value {
                <span class="hljs-keyword">case</span> .first(<span class="hljs-literal">true</span>):
                    <span class="hljs-built_in">print</span>(<span class="hljs-string">"Long press in progress"</span>)
                <span class="hljs-keyword">case</span> .second(<span class="hljs-literal">true</span>, <span class="hljs-keyword">let</span> drag):
                    state = drag?.translation ?? .zero
                <span class="hljs-keyword">default</span>: <span class="hljs-keyword">break</span>
                }
            }
            .onEnded { value <span class="hljs-keyword">in</span>
                <span class="hljs-keyword">self</span>.dragEnabled = <span class="hljs-literal">false</span>
            }
        
        <span class="hljs-keyword">return</span> <span class="hljs-type">Image</span>(systemName: <span class="hljs-string">"hand.point.right.fill"</span>)
            .foregroundColor(dragEnabled ? <span class="hljs-type">Color</span>.green : <span class="hljs-type">Color</span>.blue)
            .font(.largeTitle)
            .offset(offset)
            .gesture(longPressBeforeDrag)
    }
}
</code></pre><h2>DragGesture</h2><pre data-language="swift" class="hljs"><code><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ContentView</span>: <span class="hljs-title">View</span> </span>{
    <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">SwipeHorizontalDirection</span>: <span class="hljs-title">String</span> </span>{
        <span class="hljs-keyword">case</span> <span class="hljs-keyword">left</span>, <span class="hljs-keyword">right</span>, <span class="hljs-keyword">none</span>
    }
    
    @<span class="hljs-type">State</span> <span class="hljs-keyword">var</span> swipeHorizontalDirection: <span class="hljs-type">SwipeHorizontalDirection</span> = .<span class="hljs-keyword">none</span> { <span class="hljs-keyword">didSet</span> { <span class="hljs-built_in">print</span>(swipeHorizontalDirection) } }
    
    <span class="hljs-keyword">var</span> body: some <span class="hljs-type">View</span> {
        <span class="hljs-type">VStack</span> {
            <span class="hljs-type">Text</span>(swipeHorizontalDirection.rawValue)
        }
        .gesture(
            <span class="hljs-type">DragGesture</span>()
                .onChanged {
                    <span class="hljs-keyword">if</span> $<span class="hljs-number">0</span>.startLocation.x &gt; $<span class="hljs-number">0</span>.location.x {
                        <span class="hljs-keyword">self</span>.swipeHorizontalDirection = .<span class="hljs-keyword">left</span>
                    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> $<span class="hljs-number">0</span>.startLocation.x == $<span class="hljs-number">0</span>.location.x {
                        <span class="hljs-keyword">self</span>.swipeHorizontalDirection = .<span class="hljs-keyword">none</span>
                    } <span class="hljs-keyword">else</span> {
                        <span class="hljs-keyword">self</span>.swipeHorizontalDirection = .<span class="hljs-keyword">right</span>
                    }
                })
    }
}
</code></pre><h2>Parallelogram Shape and Mask</h2><pre data-language="swift" class="hljs"><code><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Parallelogram</span>: <span class="hljs-title">Shape</span> </span>{
    <span class="hljs-keyword">var</span> depth: <span class="hljs-type">CGFloat</span>
    <span class="hljs-keyword">var</span> flipped: <span class="hljs-type">Bool</span> = <span class="hljs-literal">false</span>
    
    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">path</span><span class="hljs-params">(<span class="hljs-keyword">in</span> rect: CGRect)</span></span> -&gt; <span class="hljs-type">Path</span> {
        <span class="hljs-type">Path</span> { p <span class="hljs-keyword">in</span>
            <span class="hljs-keyword">if</span> flipped {
                p.move(to: <span class="hljs-type">CGPoint</span>(x: <span class="hljs-number">0</span>, y: <span class="hljs-number">0</span>))
                p.addLine(to: <span class="hljs-type">CGPoint</span>(x: rect.width, y: depth))
                p.addLine(to: <span class="hljs-type">CGPoint</span>(x: rect.width, y: rect.height))
                p.addLine(to: <span class="hljs-type">CGPoint</span>(x: <span class="hljs-number">0</span>, y: rect.height - depth))
            } <span class="hljs-keyword">else</span> {
                p.move(to: <span class="hljs-type">CGPoint</span>(x: <span class="hljs-number">0</span>, y: depth))
                p.addLine(to: <span class="hljs-type">CGPoint</span>(x: rect.width, y: <span class="hljs-number">0</span>))
                p.addLine(to: <span class="hljs-type">CGPoint</span>(x: rect.width, y: rect.height - depth))
                p.addLine(to: <span class="hljs-type">CGPoint</span>(x: <span class="hljs-number">0</span>, y: rect.height))
            }
            p.closeSubpath()
        }
    }
}

<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ContentView</span>: <span class="hljs-title">View</span> </span>{
    
    <span class="hljs-keyword">var</span> body: some <span class="hljs-type">View</span> {
        <span class="hljs-type">Image</span>(<span class="hljs-string">"pic"</span>)
            .resizable()
            .aspectRatio(contentMode: .fill)
            .frame(height: <span class="hljs-number">300</span>, alignment: .center)
            .mask(<span class="hljs-type">Parallelogram</span>(depth: <span class="hljs-number">50</span>, flipped: <span class="hljs-literal">false</span>))
    }
}
</code></pre><h2>ScrollView Sticky Header</h2><pre data-language="swift" class="hljs"><code><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">StickyHeader</span>&lt;<span class="hljs-title">Content</span>: <span class="hljs-title">View</span>&gt;: <span class="hljs-title">View</span> </span>{
    <span class="hljs-keyword">var</span> minHeight: <span class="hljs-type">CGFloat</span>
    <span class="hljs-keyword">var</span> content: <span class="hljs-type">Content</span>
    
    <span class="hljs-keyword">init</span>(minHeight: <span class="hljs-type">CGFloat</span> = <span class="hljs-number">200</span>, @<span class="hljs-type">ViewBuilder</span> content: () -&gt; <span class="hljs-type">Content</span>) {
        <span class="hljs-keyword">self</span>.minHeight = minHeight
        <span class="hljs-keyword">self</span>.content = content()
    }
    
    <span class="hljs-keyword">var</span> body: some <span class="hljs-type">View</span> {
        <span class="hljs-type">GeometryReader</span> { geo <span class="hljs-keyword">in</span>
            <span class="hljs-keyword">if</span>(geo.frame(<span class="hljs-keyword">in</span>: .global).minY &lt;= <span class="hljs-number">0</span>) {
                content
                    .frame(width: geo.size.width, height: geo.size.height, alignment: .center)
            } <span class="hljs-keyword">else</span> {
                content
                    .offset(y: -geo.frame(<span class="hljs-keyword">in</span>: .global).minY)
                    .frame(width: geo.size.width, height: geo.size.height + geo.frame(<span class="hljs-keyword">in</span>: .global).minY)
            }
        }.frame(minHeight: minHeight)
    }
}

<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ContentView</span>: <span class="hljs-title">View</span> </span>{
    
    <span class="hljs-keyword">var</span> body: some <span class="hljs-type">View</span> {
        <span class="hljs-type">ScrollView</span>(.vertical, showsIndicators: <span class="hljs-literal">false</span>) {
            <span class="hljs-type">StickyHeader</span> {
                <span class="hljs-type">StickyHeader</span> {
                    <span class="hljs-type">Image</span>(<span class="hljs-string">"pic"</span>)
                        .resizable()
                        .aspectRatio(contentMode: .fill)
                }
            }
            
            <span class="hljs-comment">// MARK: Scroll View Content Here</span>
        }
    }
}
</code></pre><h2>获取屏幕数据</h2><pre data-language="swift" class="hljs"><code><span class="hljs-class"><span class="hljs-keyword">extension</span> <span class="hljs-title">View</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getRect</span><span class="hljs-params">()</span></span> -&gt; <span class="hljs-type">CGRect</span> {
        <span class="hljs-keyword">return</span> <span class="hljs-type">UIScreen</span>.main.bounds
    }
    
    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getSageArea</span><span class="hljs-params">()</span></span> -&gt; <span class="hljs-type">UIEdgeInsets</span> {
        <span class="hljs-keyword">return</span> <span class="hljs-type">UIApplication</span>.shared.windows.first?.safeAreaInsets ?? <span class="hljs-type">UIEdgeInsets</span>(top: <span class="hljs-number">0</span>, <span class="hljs-keyword">left</span>: <span class="hljs-number">0</span>, bottom: <span class="hljs-number">0</span>, <span class="hljs-keyword">right</span>: <span class="hljs-number">0</span>)
    }
}
</code></pre><h2>视图的init()和滚动视图的防回弹</h2><pre data-language="swift" class="hljs"><code><span class="hljs-keyword">init</span>() { <span class="hljs-type">UIScrollView</span>.appearance().bounces = <span class="hljs-literal">false</span> }
</code></pre><h2>获得滚动视图的当前offset</h2><pre data-language="swift" class="hljs"><code>.overlay(
    <span class="hljs-type">GeometryReader</span> { proxy -&gt; <span class="hljs-type">Color</span> <span class="hljs-keyword">in</span>
        <span class="hljs-type">DispatchQueue</span>.main.async {
            <span class="hljs-keyword">if</span> startOffset == <span class="hljs-number">0</span> {
                <span class="hljs-keyword">self</span>.startOffset = proxy.frame(<span class="hljs-keyword">in</span>: .global).minY
            }
            
            <span class="hljs-keyword">let</span> offset =  proxy.frame(<span class="hljs-keyword">in</span>: .global).minY
            <span class="hljs-keyword">self</span>.scrollViewOffset = offset - startOffset
        }
        <span class="hljs-keyword">return</span> <span class="hljs-type">Color</span>.clear
    }
    .frame(width: <span class="hljs-number">0</span>, height: <span class="hljs-number">0</span>, alignment: .top), alignment: .top)
</code></pre><h2>双shadow</h2><pre data-language="swift" class="hljs"><code>.shadow(color: <span class="hljs-type">Color</span>.primary.opacity(<span class="hljs-number">0.1</span>), radius: <span class="hljs-number">5</span>, x: <span class="hljs-number">5</span>, y: <span class="hljs-number">5</span>)
.shadow(color: <span class="hljs-type">Color</span>.primary.opacity(<span class="hljs-number">0.1</span>), radius: <span class="hljs-number">5</span>, x: -<span class="hljs-number">5</span>, y: -<span class="hljs-number">5</span>)
</code></pre><h2>持续动画</h2><pre data-language="swift" class="hljs"><code><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">doAnimation</span><span class="hljs-params">()</span></span>{
    withAnimation(<span class="hljs-type">Animation</span>.easeInOut(duration:<span class="hljs-number">0.6</span>).repeatForever(autoreverses: <span class="hljs-literal">true</span>)) {   
        animateBall.toggle()
    }
    withAnimation(<span class="hljs-type">Animation</span>.easeInOut(duration:<span class="hljs-number">0.8</span>).repeatForever(autoreverses: <span class="hljs-literal">true</span>)) {   
        animateRotation.toggle()
    }   
}
</code></pre><h2>3D效果实现圆到椭圆</h2><pre data-language="swift" class="hljs"><code><span class="hljs-type">Circle</span>()
    .fill(<span class="hljs-type">Color</span>.gray.opacity(<span class="hljs-number">0.4</span>))
    .frame(width: animateBall ?  <span class="hljs-number">40</span> : <span class="hljs-number">20</span>, height: <span class="hljs-number">40</span>)
    .rotation3DEffect(
        .<span class="hljs-keyword">init</span>(degrees: <span class="hljs-number">70</span>),
        axis: (x: <span class="hljs-number">1</span>, y: <span class="hljs-number">0</span>, z: <span class="hljs-number">0</span>),
        anchor: .center
    )
</code></pre><h2>3D效果</h2><pre data-language="swift" class="hljs"><code>.rotation3DEffect(.<span class="hljs-keyword">init</span>(degrees: getProgress() * <span class="hljs-number">90</span>), axis:(x:<span class="hljs-number">0</span>, y: <span class="hljs-number">1</span>, z: <span class="hljs-number">0</span>), anchor: offset &gt; <span class="hljs-number">0</span> ?.leading : .trailing, anchorZ: <span class="hljs-number">0</span>, perspective: <span class="hljs-number">0.5</span>)
</code></pre><h2>自定义圆角</h2><pre data-language="swift" class="hljs"><code><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CustomCorner</span>: <span class="hljs-title">Shape</span> </span>{
    <span class="hljs-keyword">var</span> corners: <span class="hljs-type">UIRectCorner</span>
    <span class="hljs-keyword">var</span> radius: <span class="hljs-type">CGFloat</span>
    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">path</span><span class="hljs-params">(<span class="hljs-keyword">in</span> rect: CGRect)</span></span> -&gt; <span class="hljs-type">Path</span> {
        <span class="hljs-keyword">let</span> path = <span class="hljs-type">UIBezierPath</span>(roundedRect: rect, byRoundingCorners: corners,cornerRadii: <span class="hljs-type">CGSize</span>(width: radius, height: radius))
        <span class="hljs-keyword">return</span> <span class="hljs-type">Path</span>(path.cgPath)
    }
}
</code></pre><h2>用zIndex调整前后次序</h2><pre data-language="swift" class="hljs"><code>.zIndex(<span class="hljs-number">1</span>) <span class="hljs-comment">// 后</span>
.zIndex(<span class="hljs-number">0</span>) <span class="hljs-comment">// 前</span>
</code></pre><h2>@ViewBuilder</h2><pre data-language="swift" class="hljs"><code><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CustomStackView</span>&lt;<span class="hljs-title">Title</span>: <span class="hljs-title">View</span>, <span class="hljs-title">Content</span>:<span class="hljs-title">View</span>&gt;: <span class="hljs-title">View</span> </span>{
    <span class="hljs-keyword">var</span> titleView: <span class="hljs-type">Title</span>
    <span class="hljs-keyword">var</span> contentView: <span class="hljs-type">Content</span>
    <span class="hljs-keyword">init</span>(@<span class="hljs-type">ViewBuilder</span> titleView:@escaping () -&gt;<span class="hljs-type">Title</span>, @<span class="hljs-type">ViewBuilder</span> contentView:@escaping () -&gt;<span class="hljs-type">Content</span>) {
        <span class="hljs-keyword">self</span>.contentView = contentView()
        <span class="hljs-keyword">self</span>.titleView = titleView()
    }
</code></pre><h2>控件颜色</h2><pre data-language="swift" class="hljs"><code>.tint(.purple)
</code></pre><h2>延迟动画</h2><pre data-language="swift" class="hljs"><code>.onAppear {
     <span class="hljs-type">DispatchQueue</span>.main.asyncAfter(deadline: .now() + <span class="hljs-number">0.5</span>) {
        withAnimation(.spring()) {
</code></pre><h2>CustomCorner</h2><pre data-language="swift" class="hljs"><code><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CustomCorner</span>: <span class="hljs-title">Shape</span> </span>{
    <span class="hljs-keyword">var</span> corners: <span class="hljs-type">UIRectCorner</span>
    <span class="hljs-keyword">var</span> radius: <span class="hljs-type">CGFloat</span>
    
    <span class="hljs-function"><span class="hljs-keyword">func</span>  <span class="hljs-title">path</span><span class="hljs-params">(<span class="hljs-keyword">in</span> rect: CGRect)</span></span> -&gt; <span class="hljs-type">Path</span> {
        <span class="hljs-keyword">let</span> path = <span class="hljs-type">UIBezierPath</span>(roundedRect: rect, byRoundingCorners: corners, cornerRadii: <span class="hljs-type">CGSize</span>(width: radius, height: radius))
        <span class="hljs-keyword">return</span> <span class="hljs-type">Path</span>(path.cgPath)
    }
}

<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ContentView</span>: <span class="hljs-title">View</span> </span>{
    
    <span class="hljs-keyword">var</span> body: some <span class="hljs-type">View</span> {
        <span class="hljs-type">CustomCorner</span>(corners: <span class="hljs-type">UIRectCorner</span>.topLeft, radius: <span class="hljs-number">30</span>)
            .fill(<span class="hljs-type">Color</span>.purple)
            .frame(width: <span class="hljs-number">240</span>, height: <span class="hljs-number">80</span>)
    }
}
</code></pre><h2>获取屏幕大小 / 0圆角的作用</h2><pre data-language="swift" class="hljs"><code><span class="hljs-type">GeometryReader</span> { proxy <span class="hljs-keyword">in</span>
    <span class="hljs-keyword">let</span> frame = proxy.frame(<span class="hljs-keyword">in</span>: .global)
    <span class="hljs-type">Image</span>(selectedTab.image)
        .resizable()
        .aspectRatio(contentMode: .fill)
        .frame(width: frame.width, height: frame.height, alignment: .center)
        <span class="hljs-comment">//why we using corner radius</span>
        <span class="hljs-comment">//because image in SwiftUI using .fill</span>
        <span class="hljs-comment">//will require corner radius or clipshape to cut the image</span>
        .cornerRadius(<span class="hljs-number">0</span>)
}
.ignoresSafeArea()
</code></pre><h2>当前值的判定</h2><pre data-language="swift" class="hljs"><code><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getIndex</span><span class="hljs-params">()</span></span> -&gt; <span class="hljs-type">Int</span> {
    <span class="hljs-keyword">let</span> index = trips.firstIndex { (trip) -&gt; <span class="hljs-type">Bool</span> <span class="hljs-keyword">in</span>
        <span class="hljs-keyword">return</span> selectedTab.id == trip.id
    } ?? <span class="hljs-number">0</span>
    <span class="hljs-keyword">return</span> index
}
</code></pre><h2>多行文本居中</h2><pre data-language="swift" class="hljs"><code><span class="hljs-type">Text</span>(<span class="hljs-string">"Happy Birthday\nJustine"</span>)
    .kerning(<span class="hljs-number">3</span>)
    .lineSpacing(<span class="hljs-number">10.0</span>)
    .multilineTextAlignment(.center)
</code></pre><h2>数组中随机元素</h2><pre data-language="swift" class="hljs"><code>.randomElement()
</code></pre><h2>禁止控件连击</h2><pre data-language="swift" class="hljs"><code><span class="hljs-type">Button</span>(...
.disabled(wish) <span class="hljs-comment">// wish 变量控制</span>
</code></pre><h2>Timer / Transition</h2><pre data-language="swift" class="hljs"><code><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CubeRotationModifier</span>: <span class="hljs-title">AnimatableModifier</span> </span>{
    <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">SlideDirection</span> </span>{
        <span class="hljs-keyword">case</span> enter
        <span class="hljs-keyword">case</span> exit
    }
    
    <span class="hljs-keyword">var</span> pct: <span class="hljs-type">Double</span>
    <span class="hljs-keyword">var</span> direction: <span class="hljs-type">SlideDirection</span>
    
    <span class="hljs-keyword">var</span> animatableData: <span class="hljs-type">Double</span> {
        <span class="hljs-keyword">get</span> { pct }
        <span class="hljs-keyword">set</span> { pct = newValue }
    }
      
    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">body</span><span class="hljs-params">(content: Content)</span></span> -&gt; some <span class="hljs-type">View</span> {
        <span class="hljs-type">GeometryReader</span> { geo <span class="hljs-keyword">in</span>
            content
                .rotation3DEffect(
                    <span class="hljs-type">Angle</span>(degrees: calcRotation()),
                    axis: (x: <span class="hljs-number">0.0</span>, y: <span class="hljs-number">1.0</span>, z: <span class="hljs-number">0.0</span>),
                    anchor: direction == .enter ? .leading : .trailing,
                    anchorZ: <span class="hljs-number">0</span>,
                    perspective: <span class="hljs-number">0.1</span>
                ).transformEffect(.<span class="hljs-keyword">init</span>(translationX: calcTranslation(geo: geo), y: <span class="hljs-number">0</span>))
        }
    }

    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">calcTranslation</span><span class="hljs-params">(geo: GeometryProxy)</span></span> -&gt; <span class="hljs-type">CGFloat</span> {
        <span class="hljs-keyword">if</span> direction == .enter {
            <span class="hljs-keyword">return</span> geo.size.width - (<span class="hljs-type">CGFloat</span>(pct) * geo.size.width)
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span> * (<span class="hljs-type">CGFloat</span>(pct) * geo.size.width)
        }
    }

    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">calcRotation</span><span class="hljs-params">()</span></span> -&gt; <span class="hljs-type">Double</span> {
        <span class="hljs-keyword">if</span> direction == .enter {
            <span class="hljs-keyword">return</span> <span class="hljs-number">90</span> - (pct * <span class="hljs-number">90</span>)
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span> * (pct * <span class="hljs-number">90</span>)
        }
    }
}

<span class="hljs-class"><span class="hljs-keyword">extension</span> <span class="hljs-title">AnyTransition</span> </span>{
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">var</span> cubeRotation: <span class="hljs-type">AnyTransition</span> {
        <span class="hljs-keyword">get</span> {
            <span class="hljs-type">AnyTransition</span>.asymmetric(
                insertion: <span class="hljs-type">AnyTransition</span>.modifier(active: <span class="hljs-type">CubeRotationModifier</span>(pct: <span class="hljs-number">0</span>, direction: .enter), identity: <span class="hljs-type">CubeRotationModifier</span>(pct: <span class="hljs-number">1</span>, direction: .enter)),
                removal: <span class="hljs-type">AnyTransition</span>.modifier(active: <span class="hljs-type">CubeRotationModifier</span>(pct: <span class="hljs-number">1</span>, direction: .exit), identity: <span class="hljs-type">CubeRotationModifier</span>(pct: <span class="hljs-number">0</span>, direction: .exit)))
        }
    }
}

<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ContentView</span>: <span class="hljs-title">View</span> </span>{
    @<span class="hljs-type">State</span> <span class="hljs-keyword">var</span> index: <span class="hljs-type">Int</span> = <span class="hljs-number">0</span>
    @<span class="hljs-type">State</span> <span class="hljs-keyword">var</span> timer = <span class="hljs-type">Timer</span>.publish(every: <span class="hljs-number">2</span>, on: <span class="hljs-type">RunLoop</span>.main, <span class="hljs-keyword">in</span>: <span class="hljs-type">RunLoop</span>.<span class="hljs-type">Mode</span>.common).autoconnect()
    <span class="hljs-keyword">var</span> colors: [<span class="hljs-type">Color</span>] = [<span class="hljs-type">Color</span>.red, <span class="hljs-type">Color</span>.blue, <span class="hljs-type">Color</span>.green, <span class="hljs-type">Color</span>.orange, <span class="hljs-type">Color</span>.purple]

    <span class="hljs-keyword">var</span> body: some <span class="hljs-type">View</span> {
        <span class="hljs-type">ZStack</span> {
            <span class="hljs-type">ForEach</span>(colors.<span class="hljs-built_in">indices</span>) { i <span class="hljs-keyword">in</span>
                <span class="hljs-keyword">if</span> index == i {
                    colors[i]
                        .transition(.cubeRotation)
                }
            }
        }
        .frame(width: <span class="hljs-number">200</span>, height: <span class="hljs-number">200</span>, alignment: .center)
        .onReceive(timer) { <span class="hljs-number">_</span> <span class="hljs-keyword">in</span>
            withAnimation(.easeInOut(duration: <span class="hljs-number">1.3</span>)) {
                index = (index + <span class="hljs-number">1</span>) % colors.<span class="hljs-built_in">count</span>
            }
        }
    }
}
</code></pre><h2>pinnedViews</h2><pre data-language="swift" class="hljs"><code><span class="hljs-type">ScrollView</span> {
    <span class="hljs-type">LazyVStack</span>(alignment: .center, spacing: <span class="hljs-number">40</span>, pinnedViews: [.sectionHeaders], content: {
        <span class="hljs-type">ForEach</span>(<span class="hljs-number">0</span>...<span class="hljs-number">50</span>, id: \.<span class="hljs-keyword">self</span>) { <span class="hljs-built_in">count</span> <span class="hljs-keyword">in</span>
            <span class="hljs-type">Section</span>(header: stickyHeaderView) {
                <span class="hljs-type">Text</span>(<span class="hljs-string">"section \(count)"</span>)
            }
        }
    })
}
</code></pre><h2>.init()</h2><pre data-language="swift" class="hljs"><code>@<span class="hljs-type">StateObject</span> <span class="hljs-keyword">var</span> lockscreenModel: <span class="hljs-type">LockscreenModel</span> = .<span class="hljs-keyword">init</span>()
</code></pre><h2>PhotosPicker</h2><pre data-language="swift" class="hljs"><code><span class="hljs-type">PhotosPicker</span>(selection: $lockscreenModel.pickedItem, matching: .images, preferredItemEncoding: .automatic, photoLibrary: .shared()) {
    <span class="hljs-type">VStack</span>(spacing: <span class="hljs-number">10</span>){
        <span class="hljs-type">Image</span>(systemName: <span class="hljs-string">"plus.viewfinder"</span>)
            .font(.largeTitle)
        
        <span class="hljs-type">Text</span>(<span class="hljs-string">"Add Image"</span>)
    }
    .foregroundColor(.primary)
}
</code></pre><h2>PreferenceKey</h2><pre data-language="swift" class="hljs"><code><span class="hljs-type">Color</span>.clear
    .preference(key: <span class="hljs-type">RectKey</span>.<span class="hljs-keyword">self</span>, value: rect)
    .onPreferenceChange(<span class="hljs-type">RectKey</span>.<span class="hljs-keyword">self</span>) { value <span class="hljs-keyword">in</span>
        lockscreenModel.textRect = value
    }
    
<span class="hljs-comment">//</span>
<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">RectKey</span>: <span class="hljs-title">PreferenceKey</span> </span>{
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">var</span> defaultValue: <span class="hljs-type">CGRect</span> = .zero
    <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reduce</span><span class="hljs-params">(value: <span class="hljs-keyword">inout</span> CGRect, nextValue: <span class="hljs-params">()</span></span></span> -&gt; <span class="hljs-type">CGRect</span>) {
        value = nextValue()
    }
}
</code></pre><h2>Date To String Conversion</h2><pre data-language="swift" class="hljs"><code><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">DateFormat</span>: <span class="hljs-title">String</span> </span>{
    <span class="hljs-keyword">case</span> hour = <span class="hljs-string">"hh"</span>
    <span class="hljs-keyword">case</span> minute = <span class="hljs-string">"mm"</span>
    <span class="hljs-keyword">case</span> seconds = <span class="hljs-string">"ss"</span>
}

<span class="hljs-class"><span class="hljs-keyword">extension</span> <span class="hljs-title">Date</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">converToString</span><span class="hljs-params">(<span class="hljs-number">_</span> format: DateFormat)</span></span> -&gt; <span class="hljs-type">String</span> {
        <span class="hljs-keyword">let</span> formatter = <span class="hljs-type">DateFormatter</span>()
        formatter.dateFormat = format.rawValue
        
        <span class="hljs-keyword">return</span> formatter.string(from: <span class="hljs-keyword">self</span>)
    }
}
</code></pre><h2>像素点的Color值</h2><pre data-language="swift" class="hljs"><code><span class="hljs-class"><span class="hljs-keyword">extension</span> <span class="hljs-title">UIView</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">color</span><span class="hljs-params">(at point: CGPoint)</span></span> -&gt; (<span class="hljs-type">CGFloat</span>, <span class="hljs-type">CGFloat</span>, <span class="hljs-type">CGFloat</span>, <span class="hljs-type">CGFloat</span>) {
        <span class="hljs-keyword">let</span> colorspace = <span class="hljs-type">CGColorSpaceCreateDeviceRGB</span>()
        <span class="hljs-keyword">let</span> bitmapInfo = <span class="hljs-type">CGBitmapInfo</span>(rawValue: <span class="hljs-type">CGImageAlphaInfo</span>.premultipliedLast.rawValue)
        
        <span class="hljs-keyword">var</span> pixelData: [<span class="hljs-type">UInt8</span>] = [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]
        
        <span class="hljs-keyword">let</span> context = <span class="hljs-type">CGContext</span>(data: &amp;pixelData, width: <span class="hljs-number">1</span>, height: <span class="hljs-number">1</span>, bitsPerComponent: <span class="hljs-number">8</span>, bytesPerRow: <span class="hljs-number">4</span>, space: colorspace, bitmapInfo: bitmapInfo.rawValue)
        context!.translateBy(x: -point.x, y: -point.y)
        <span class="hljs-keyword">self</span>.layer.render(<span class="hljs-keyword">in</span>: context!)
        <span class="hljs-keyword">let</span> red = <span class="hljs-type">CGFloat</span>(pixelData[<span class="hljs-number">0</span>]) / <span class="hljs-number">255</span>
        <span class="hljs-keyword">let</span> blue = <span class="hljs-type">CGFloat</span>(pixelData[<span class="hljs-number">1</span>]) / <span class="hljs-number">255</span>
        <span class="hljs-keyword">let</span> green = <span class="hljs-type">CGFloat</span>(pixelData[<span class="hljs-number">2</span>]) / <span class="hljs-number">255</span>
        <span class="hljs-keyword">let</span> alpha = <span class="hljs-type">CGFloat</span>(pixelData[<span class="hljs-number">3</span>]) / <span class="hljs-number">255</span>
        <span class="hljs-keyword">return</span> (red, blue, green, alpha)
    }
}
</code></pre><h2>screenSize</h2><pre data-language="swift" class="hljs"><code><span class="hljs-class"><span class="hljs-keyword">extension</span> <span class="hljs-title">UIApplication</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">screenSize</span><span class="hljs-params">()</span></span>-&gt;<span class="hljs-type">CGSize</span>{
        <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> window = connectedScenes.first <span class="hljs-keyword">as</span>? <span class="hljs-type">UIWindowScene</span> <span class="hljs-keyword">else</span> { <span class="hljs-keyword">return</span> .zero }
        <span class="hljs-keyword">return</span> window.screen.bounds.size
    }
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makeUIView</span><span class="hljs-params">(context: Context)</span></span> -&gt; <span class="hljs-type">UIView</span> {
    <span class="hljs-keyword">let</span> size = <span class="hljs-type">UIApplication</span>.shared.screenSize()
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://chengzhenyu.github.io/posts/20220819-slipthing</guid><title>跟风买了一个滑行垫</title><description></description><link>https://chengzhenyu.github.io/posts/20220819-slipthing</link><pubDate>Fri, 19 Aug 2022 20:00:00 +0800</pubDate><content:encoded><![CDATA[<blockquote><p>跟风买了一个滑行垫。最长规格是2米，看了一下运动达人的运动视频，觉得应该是越长越好。 优惠满减后60多元。对于玩过旱冰鞋、冰刀或是滑板的人来说，应该不用适应，上去就滑，测滑、正滑、倒滑，反正就是随便滑。</p></blockquote><p>
<img src="https://chengzhenyu.github.io/images/slipthing1.jpg" width="100%">
</p><p>
<img src="https://chengzhenyu.github.io/images/slipthing2.jpg" width="100%">
</p><h2>最滑有多滑？</h2><ul><li>大概像是没穿防滑鞋走在冬天还算是挺滑的路上的那种滑.</li><li>不猫着点儿腰、不注意的话也许会摔倒的那种滑</li><li>双翘滑板滑度六分之一的那种滑吧</li></ul><h2>滑度评测</h2><blockquote><p>脚丫子和各种装备搭配的滑度0-10（0: 不滑，10: 最滑）打分大概是这样的：</p></blockquote><ul><li>光脚：0</li><li>脚+鞋：2</li><li>脚+棉袜：5（丝袜应该更滑，没体验）</li><li>脚+增滑鞋套：8</li><li>脚+鞋+增滑鞋套：10（鞋底平正更滑，看起来这是最佳搭配）</li></ul><h2>体验</h2><ul><li>出汗，大汗淋漓的那种，腰部及以下各肌肉群会酸。</li><li>挺累、挺好玩儿，虽然没有滑（旱）冰或是滑板好玩，可毕竟安全些，现在这个年龄可不敢再玩那种极限运动咯。</li><li>不穿鞋只套鞋套的话，脚掌在上面摩擦很舒服，但是前脚掌外侧因为施力或撞在两侧黑长块上会隐隐作痛。</li><li>蹬地力量大一些就瞬间撞到另一侧的黑长块上，感觉垫子长度要是再增加一些就好了。</li><li>要谨慎一些，再谨慎一些，安全第一！不要摔倒，不要撞到家具或是人，就算是撞到花花草草也是不好的。</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://chengzhenyu.github.io/posts/little-things</guid><title>生活记录</title><description></description><link>https://chengzhenyu.github.io/posts/little-things</link><pubDate>Thu, 18 Aug 2022 06:50:00 +0800</pubDate><content:encoded><![CDATA[<h2>魔方sub10</h2><ul><li>大宝沉迷“我的世界”有大半年了，和小伙伴们联机，看各种圈内up主的视频，自己学习知识，钻研技、战术…… 耗费太多时间和精力在这个上面了，影响学习不说，最大的害处是像素化的跑酷风格太费眼睛。 在前几天的一个晚上，俺们爷俩儿长谈了一次，大宝终于决定“弃坑”了，并重拾魔方这个爱好。 能做出这个决定还有一个好处，在未来无论遇到什么让人沉迷且有危害的事情，这都是一个极好的经验，“想当年游戏都能戒，何况区区xxx呢！”<ul><li>插画狮问我你都跟他说什么了他居然不玩游戏了？</li><li>秘密 @_^</li></ul></li></ul><ul><li>还算是眼明手快那伙的，给大宝抢到了首批限量gan 12ui，不到三天收到了。</li></ul><ul><li>9.929秒，大宝的三阶魔方复原最快纪录又刷新了<ul><li>2022年8月17日，大宝第一次“sub10”</li></ul></li></ul><p>
<img src="https://chengzhenyu.github.io/images/littlethings0.jpg" width="100%">
</p><ul><li>查了一下三阶魔方世界纪录发展历程<ul><li>22.95秒（1982年）</li><li>10.36秒（2007年2月24日）</li><li>～～9.929秒～～</li><li>9.86秒（2007年5月5日）</li><li>现在的世界纪录（最好和平均）的保持者都是中国小朋友</li></ul></li></ul><p>
<img src="https://chengzhenyu.github.io/images/littlethings1.png" width="100%">
</p><hr><p>
<img src="https://chengzhenyu.github.io/images/littlethings2.png" width="100%">
</p><hr><p>
<img src="https://chengzhenyu.github.io/images/littlethings3.png" width="100%">
</p><hr><p>
<img src="https://chengzhenyu.github.io/images/littlethings4.png" width="100%">
</p><h2>电动轮椅 vs 人体工学椅</h2><ul><li>一友说，现在已经有互联网小伙伴不买人体工学椅来保护颈椎腰椎了，而是买电动轮椅，价格也就是人体工学椅的几分之一，坐着超级舒服，放平就是午睡神器，加班到半夜就直接躺平睡公司了。功能极其丰富，连按摩座垫都有。通勤距离近的话就可以平替其他交通工具，距离远的话也可以坐着去搭乘公共交通。</li><li>真能琢磨@_^</li></ul><h2>关于BJ车牌指标</h2><ul><li>才知道BJ的特殊规定，8岁辽牌Smart转籍进京不符合排放标准。插画狮的小车车想要拥有BJ户口的梦想彻底破灭。</li><li>「纠结」：年底到期的指标怎么办呢？断舍离，直接放弃？插画狮有些舍不得，想要留着以满足神兽们十年后可能的用车需求。买辆车占指标？家里的两台车都是偶尔开开，经常闲置到电瓶亏电，隔三差五需要想着去打打火。无论买新车还是二手车，都是扔在那里落灰。把牌子租出去？是违法行为，GJ还不允许。还有没有其他的应对方法呢？</li><li>然后，看到了官方发布的延期政策，说的是小客车指标有效期截止日在2020年1月24日至本市解除重大突发公共卫生事件响应之日后60日的指标持有人，可于解除之日后120日内办理完成车辆登记手续。 当前本市尚未解除突发公共卫生事件响应，指标延期政策仍在执行。如指标确认通知书上记载的有效期截止日符合上述规定，则可以延期使用，无需额外办理延期手续。</li><li>有概率可以延期，能腾一天是一天吧，如无必要勿增实体</li></ul><p>
<img src="https://chengzhenyu.github.io/images/littlethings5.jpg" width="100%">
</p><h2>笔记系统升级</h2><blockquote><p>写代码，写笔记，读技术文章，全都在一个地方，“一元化”。</p></blockquote><ul><li>去除 Joplin</li><li>改用 Xcode</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://chengzhenyu.github.io/posts/english-study</guid><title>捡起英语</title><description></description><link>https://chengzhenyu.github.io/posts/english-study</link><pubDate>Wed, 10 Aug 2022 05:20:00 +0800</pubDate><content:encoded><![CDATA[<h2>有一个APP在鼓励我</h2><p>找了个APP测试一下词汇量，它告诉我现在是这个数“7837”@_~ 浮夸，一半都达不到吧。</p><img src="https://chengzhenyu.github.io/images/english-words-plan-1.png" alt="english words plan 1"/><p>还贴心的为我制定了学习计划，并且在下面画了个大饼。谢谢！</p><img src="https://chengzhenyu.github.io/images/english-words-plan-2.png" alt="english words plan 2"/><h2>把英语捡一捡</h2><p>用的是箱底儿的《牛津英语词汇》，这是它原来的模样。</p><img src="https://chengzhenyu.github.io/images/english-words-plan-3.jpg" alt="english words plan 3"/><p>把它加入了我的“slim 11”系统，这是它现在的模样。</p><img src="https://chengzhenyu.github.io/images/english-words-plan-4.jpg" alt="english words plan 4"/><p>初、中、高级三本书，每本80课，共计240课。</p><p>一边拆，一边背。</p><p>现在的进度是16/240。</p>]]></content:encoded></item><item><guid isPermaLink="true">https://chengzhenyu.github.io/posts/brandnew-month</guid><title>优化笔记系统</title><description></description><link>https://chengzhenyu.github.io/posts/brandnew-month</link><pubDate>Mon, 1 Aug 2022 05:31:00 +0800</pubDate><content:encoded><![CDATA[<p>
<img src="https://chengzhenyu.github.io/images/notesystem2022080501.jpg" width="100%">
</p><blockquote><p>20220803 UPDATED：简化。 20220805 UPDATED：极简：-金属活页环，-TN皮。</p></blockquote><h2>笔记的三种形态</h2><ul><li>Joplin</li></ul><ul><li>.com</li></ul><ul><li>A5slim（210x110，A4纸，其他）</li></ul><pre data-language="shell" class="hljs"><code>A4三栏设置基本数据：
页面方向：横向
页边空白：内部1.5cm，外侧0.5cm，勾选对开页（可使双面打印前后对齐）
三栏等宽：栏8.57cm，间距1cm
字号：10
行距：1
</code></pre><h2>开发小记</h2><ul><li>publish run报错<ul><li>升级到macos ventura Beta4以后，终端执行<code>publish run</code>报“segmentation fault”错误。</li><li>删除依赖package、build等文件后，重新run，正常。</li><li>原因：不查了，懒@,.@</li></ul></li></ul><blockquote><p>以下内容作废</p></blockquote><h2>原电子笔记不变</h2><ul><li>Joplin<ul><li>随时记录</li><li>CP大法</li><li>按需转至.com和A4</li></ul></li></ul><ul><li>.com</li></ul><h2>一元化笔记系统升级</h2><p><s><code>A4三折 -&gt; A5SLIM -&gt; TN标准</code></s></p><p><code>A4三折 -&gt; A5SLIM</code></p><ul><li>A4纸<ul><li>A4纸是最好的笔记初始形态。</li><li>纸张类型<ul><li>白纸</li><li>道林纸（米黄） new！</li><li>方格纸</li></ul></li><li>折叠法<ul><li>三折法（<s>最常用，可</s>直接放入A5SLIM）</li><li><s>四折法</s></li><li><s>其他</s></li></ul></li></ul></li></ul><ul><li>A5SLIM<ul><li><s>空白凭证纸210x110</s></li><li>A4纸三折法</li><li>其他</li></ul></li></ul><ul><li><s>TN标准（随身携带）</s><ul><li><s>自带小本</s></li><li><s>锦宫a5handy</s><s>自制A5SLIM活页本（A5SLIM + A4三折法）直接放入</s></li></ul></li></ul><p>
<img src="https://chengzhenyu.github.io/images/notesystem20220801.jpg" width="100%">
</p><p>
<img src="https://chengzhenyu.github.io/images/notesystem2022080301.jpg" width="100%">
</p><p>
<img src="https://chengzhenyu.github.io/images/notesystem2022080302.jpg" width="100%">
</p>]]></content:encoded></item><item><guid isPermaLink="true">https://chengzhenyu.github.io/posts/basketball-skill</guid><title>二十年多前，勤奋地练习篮球技术</title><description></description><link>https://chengzhenyu.github.io/posts/basketball-skill</link><pubDate>Wed, 27 Jul 2022 17:00:00 +0800</pubDate><content:encoded><![CDATA[<p>
<img src="https://chengzhenyu.github.io/images/basketballskill.jpg" width="100%">
</p>]]></content:encoded></item><item><guid isPermaLink="true">https://chengzhenyu.github.io/posts/laowujian</guid><title>老物件</title><description></description><link>https://chengzhenyu.github.io/posts/laowujian</link><pubDate>Wed, 27 Jul 2022 16:00:00 +0800</pubDate><content:encoded><![CDATA[<p>
<img src="https://chengzhenyu.github.io/images/panfront.jpg" width="100%">
</p><p>
<img src="https://chengzhenyu.github.io/images/panback.jpg" width="100%">
</p>]]></content:encoded></item><item><guid isPermaLink="true">https://chengzhenyu.github.io/posts/chahua-20220721</guid><title>画画画01</title><description></description><link>https://chengzhenyu.github.io/posts/chahua-20220721</link><pubDate>Thu, 21 Jul 2022 22:48:00 +0800</pubDate><content:encoded><![CDATA[<blockquote><p>别的不重要，就是画画画。</p></blockquote><p>
<img src="https://chengzhenyu.github.io/images/drawing20220721001.jpg" width="100%">
</p><h2>读《小熊老师零基础神奇绘画课》</h2><ul><li>小熊老师说：<ul><li>用笔不改、不填、不虚、不画阴影、不填黑色。</li><li>先画前面部分，再画后面部分，画的过程中尽量注意局部，画到哪里看哪里，不要老是去顾及整体像不像，像不像不重要。</li><li>注意封口。初学者行笔过程要慢，特别在拐弯和接口的地方，就像开车转弯要减速一样。封口的好处一是提醒大家线要画实在，二是为了下一步电脑上色时颜色不会漏掉。</li><li>用线不能过密，0-6即可，7-11不要用。</li><li>画面四个角的空间要有大小的变化，四条边也要有疏密变化，构图就是解决四个角四条边的变化问题。</li><li>配色的规则是选择“朋友”找协调，选择“敌人”找对比，选择“暧昧”找平衡。</li><li>不会画的就先空着，比如人的五官，比如手。但是，如果你不去纠结像不像的问题，随时都可以画任何东西。</li></ul></li></ul><ul><li>临摹画<ul><li>比如芥子园中的画</li></ul></li></ul><ul><li>对着实物写生<ul><li>观察不好就拍照片看看</li></ul></li></ul><blockquote><p>如果有人评论你的画...</p></blockquote><h2>对专家</h2><ul><li>说“谢谢”。</li></ul><h2>对商家</h2><ul><li>:)</li></ul><h2>对键盘侠</h2><ul><li></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://chengzhenyu.github.io/posts/modifier-music-player</guid><title>实现播放音乐</title><description></description><link>https://chengzhenyu.github.io/posts/modifier-music-player</link><pubDate>Wed, 20 Jul 2022 01:00:00 +0800</pubDate><content:encoded><![CDATA[<blockquote><p>用网易云音乐播放markdown格式信息给出的歌曲。</p></blockquote><h2>实现</h2><pre data-language="swift" class="hljs"><code><span class="hljs-keyword">import</span> Foundation
<span class="hljs-keyword">import</span> Ink
<span class="hljs-keyword">import</span> Sweep

<span class="hljs-keyword">var</span> musicPlayer = <span class="hljs-type">Modifier</span>(target: .codeBlocks) { html, markdown <span class="hljs-keyword">in</span>
    <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> content = markdown.substrings(between: <span class="hljs-string">"```musicPlayer\n"</span>, and: <span class="hljs-string">"\n```"</span>).first <span class="hljs-keyword">else</span> {
        <span class="hljs-keyword">return</span> html
    }
    
    <span class="hljs-keyword">var</span> musicID: <span class="hljs-type">String</span> = <span class="hljs-string">""</span>
    <span class="hljs-keyword">var</span> auto: <span class="hljs-type">String</span> = <span class="hljs-string">""</span>
    
    content.scan(using: [
        <span class="hljs-type">Matcher</span>(identifier: <span class="hljs-string">"musicID: "</span>, terminator: <span class="hljs-string">"\n"</span>, allowMultipleMatches: <span class="hljs-literal">false</span>) { match, <span class="hljs-number">_</span> <span class="hljs-keyword">in</span>
            musicID = <span class="hljs-type">String</span>(match)
        },
        <span class="hljs-type">Matcher</span>(identifier: <span class="hljs-string">"auto: "</span>, terminator: <span class="hljs-string">"\n"</span>, allowMultipleMatches: <span class="hljs-literal">false</span>) { match, <span class="hljs-number">_</span> <span class="hljs-keyword">in</span>
            auto = <span class="hljs-type">String</span>(match)
        },
    ])
    
    <span class="hljs-keyword">return</span>
        <span class="hljs-string">"""
        &lt;iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=100% height=86 src="http://music.163.com/outchain/player?type=2&amp;id=\(musicID)&amp;auto=\(auto)&amp;height=66"&gt;&lt;/iframe&gt;
        """</span>
}
</code></pre><h2>调用</h2><pre data-language="swift" class="hljs"><code><span class="hljs-keyword">try</span> <span class="hljs-type">ChengzhenyuBlog</span>().publish(
    using: [
        <span class="hljs-comment">// ...</span>
        .addModifier(modifier: musicPlayer,modifierName:<span class="hljs-string">"music player"</span>),
        <span class="hljs-comment">// ...</span>
    ]
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://chengzhenyu.github.io/posts/plugin-gencname</guid><title>编写生成CNAME的插件</title><description></description><link>https://chengzhenyu.github.io/posts/plugin-gencname</link><pubDate>Tue, 19 Jul 2022 23:40:00 +0800</pubDate><content:encoded><![CDATA[<blockquote><p>写了个插件（plugin），在Publish编译并发布站点到github时，自动产生自定义的域名文件（CNAME），放在output目录下。</p></blockquote><h2>实现</h2><pre data-language="swift" class="hljs"><code><span class="hljs-keyword">import</span> Foundation
<span class="hljs-keyword">import</span> Publish

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">extension</span> <span class="hljs-title">Plugin</span> </span>{
    <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">genCNAME</span><span class="hljs-params">(with name: String)</span></span> -&gt; <span class="hljs-type">Self</span> {
        <span class="hljs-type">Plugin</span>(name: <span class="hljs-string">"GenerateCNAME"</span>) { context <span class="hljs-keyword">in</span>
            <span class="hljs-keyword">if</span> !name.isEmpty {
                <span class="hljs-keyword">try</span> context.createOutputFile(at: <span class="hljs-string">"CNAME"</span>).write(<span class="hljs-string">"\(name)\n"</span>)
            }
        }
    }
}
</code></pre><h2>调用</h2><pre data-language="swift" class="hljs"><code><span class="hljs-keyword">try</span> <span class="hljs-type">ChengzhenyuBlog</span>().publish(
    using: [
        <span class="hljs-comment">// ...</span>
        .installPlugin(.genCNAME(with: <span class="hljs-string">"chengzhenyu.com"</span>)),
        .unwrap(.gitHub(<span class="hljs-string">"chengzhenyu/chengzhenyu.github.io"</span>), <span class="hljs-type">PublishingStep</span>.deploy)
    ]
)
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://chengzhenyu.github.io/posts/chahua</guid><title>学习插画</title><description></description><link>https://chengzhenyu.github.io/posts/chahua</link><pubDate>Tue, 19 Jul 2022 18:26:00 +0800</pubDate><content:encoded><![CDATA[<blockquote><p>插画狮时不时地会拿自己的画作问一些诸如“怎么样”、“哪种好”之类的问题，而我的应对之策就是摆出一脸严肃认真的表情，看着图，若有所思（其实心里想的是今晚是炖鲫鱼汤呢还是汆白肉呢），些许时间后点点头，一脸真诚地说“哇，好厉害”，或者以非常肯定的语气说“第一种”（通常第一种是她已经认可的方案）。当专业人士向非专业人士寻求建议时，通常目的并不是真的需要获得帮助，而仅仅是因为要得瑟显摆一下，那种情形下观众仅仅需要点个赞，或者专业人士自己已经做了决定，但是需要经过自己以外的任何人确定一下，而那时旁人的作用仅仅是压垮骆驼背的最后一根稻草而已，不重要，但是需要。稻草也需要学习怎么压一下骆驼背，构图、透视、色彩......</p></blockquote><p>
<img src="https://chengzhenyu.github.io/images/screenshot-study-illustration-2022-07-19.png" width="100%">
</p><blockquote><p>以下，为胡思乱想。</p></blockquote><h2>关于学习插画</h2><ul><li>不要试图画得像，更不要试图画得准，而应该参考图或照片或实物，画出自己想画，现阶段能画的图。</li><li>绘画，是一个建模的过程，从脑海中提取，按分类提取，构建模型，组合模型。</li><li>不要试图追求完美准确的透视，现在做不到的。</li><li>不要学习单一事物的画法，比如：云、头发、小狗、手、眼睛、褶皱、火、草...</li></ul><h2>插画元素</h2><ul><li>线1（与两侧的面的颜色不一样，只要与某个面的颜色一样，就是面的一部分了）：作为边界</li><li>线2（有丰富的长度、宽度变化，本质上是面）：表现纹理质感</li><li>面1（单一色彩）：形成区域（影子也是区域哦）和边界</li><li>面2（色彩有一定变化）：形成空间感和边界</li><li>块（由多个面组合而成）：形成空间感</li></ul><h2>练习方法</h2><ul><li>Step1：练习画“线1”，就是线稿</li><li>Step2：练习画“线2”</li><li>Step3：练习画“面1”，多个“面1”组合而成“块”</li><li>Step4：练习画“面2”，在这之前，不用管单个面上的色彩变化</li><li>Step5：到这一步了，应该已经积累了许多经验，可以把透视、构图、色彩等加进来思考，创作。<ul></ul></li></ul><blockquote><p>画点儿什么好呢？</p></blockquote><h2>插画风格</h2><ul><li>手绘风格（厚涂、半厚涂、赛璐璐）</li><li>Erics风格（大色块、简约）</li><li>MBE风格（描边、扁平）</li><li>涂鸦风格</li><li>......</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://chengzhenyu.github.io/posts/lonely-warrior</guid><title>大胖仔仔沉迷孤勇者</title><description></description><link>https://chengzhenyu.github.io/posts/lonely-warrior</link><pubDate>Sun, 17 Jul 2022 20:10:00 +0800</pubDate><content:encoded><![CDATA[<blockquote><p>这首歌火到什么程度，我不知道，我只是知道大胖仔仔每天都要听很多很多遍，还跟着一起唱:)</p></blockquote><div style="position: relative; padding: 30% 45% ; margin-top:20px;margin-bottom:20px">
<iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="https://player.bilibili.com/player.html?aid=764108122&page=1&as_wide=1&high_quality=1&danmaku=0" frameborder="no" scrolling="no"></iframe>
</div><pre data-language="undefined" class="hljs"><code>
孤勇者

作词：唐恬
作曲：钱雷
演唱：陈奕迅

都 是勇敢的
你额头的伤口 你的 不同 你犯的错
都 不必隐藏
你破旧的玩偶 你的 面具 你的自我

他们说 要带着光 驯服每一头怪兽
他们说 要缝好你的伤 没有人爱小丑
为何孤独 不可 光荣
人只有不完美 值得歌颂
谁说污泥满身的不算英雄

爱你孤身走暗巷
爱你不跪的模样
爱你对峙过绝望
不肯哭一场

爱你破烂的衣裳
却敢堵命运的枪
爱你和我那么像
缺口都一样

去吗？配吗？这褴褛的披风
战吗？战啊！以最卑微的梦
致那黑夜中的呜咽与怒吼
谁说站在光里的才算英雄

他们说 要戒了你的狂 就像擦掉了污垢
他们说 要顺台阶而上 而代价是低头
那就让我 不可 乘风
你一样骄傲着 那种孤勇
谁说对弈平凡的不算英雄

爱你孤身走暗巷
爱你不跪的模样
爱你对峙过绝望
不肯哭一场

爱你破烂的衣裳
却敢堵命运的枪
爱你和我那么像
缺口都一样

去吗？配吗？这褴褛的披风
战吗？战啊！以最卑微的梦
致那黑夜中的呜咽与怒吼
谁说站在光里的才算英雄

你的斑驳 与众不同
你的沉默 震耳欲聋

爱你孤身走暗巷
爱你不跪的模样
爱你对峙过绝望
不肯哭一场

爱你来自于蛮荒
一生不借谁的光
你将造你的城邦
在废墟之上

去吗？去啊！以最卑微的梦
战吗？战啊！以最孤高的梦
致那黑夜中的呜咽与怒吼
谁说站在光里的才算英雄
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://chengzhenyu.github.io/posts/second-day</guid><title>继续装修博客</title><description></description><link>https://chengzhenyu.github.io/posts/second-day</link><pubDate>Sun, 17 Jul 2022 17:15:00 +0800</pubDate><content:encoded><![CDATA[<blockquote><p>参考肘子的文章和开源代码继续装修博客</p></blockquote><p>差不多就是现在看到的这个样子咯～</p><h3>TODO:</h3><p>补课CSS，多年前看过的相关文档已经归零，从头再来@,.@ 好在不用看javascript咯～</p>]]></content:encoded></item><item><guid isPermaLink="true">https://chengzhenyu.github.io/posts/first-post</guid><title>时隔多年重新创建博客</title><description></description><link>https://chengzhenyu.github.io/posts/first-post</link><pubDate>Sat, 16 Jul 2022 20:34:00 +0800</pubDate><content:encoded><![CDATA[<blockquote><p>用Publish重新创建了博客，一边搭建，一边记录。</p></blockquote><h2>搭建与发布</h2><ul><li>用源代码安装Publish</li></ul><pre data-language="sh" class="hljs"><code><span class="hljs-variable">$git</span> <span class="hljs-built_in">clone</span> https://github.com/JohnSundell/Publish.git
<span class="hljs-variable">$cd</span> Publish
<span class="hljs-variable">$make</span>
</code></pre><ul><li>创建自己的博客</li></ul><pre data-language="sh" class="hljs"><code><span class="hljs-variable">$mkdir</span> ChengzhenyuBlog
<span class="hljs-variable">$cd</span> ChengzhenyuBlog 
<span class="hljs-variable">$publish</span> new
</code></pre><ul><li>编译及运行</li></ul><pre data-language="sh" class="hljs"><code><span class="hljs-variable">$publish</span> run
</code></pre><ul><li>修改main.swift</li></ul><pre data-language="swift" class="hljs"><code><span class="hljs-keyword">var</span> url = <span class="hljs-type">URL</span>(string: <span class="hljs-string">"https://chengzhenyu.github.io"</span>)!
</code></pre><pre data-language="swift" class="hljs"><code><span class="hljs-keyword">try</span> <span class="hljs-type">ChengzhenyuBlog</span>().publish( <span class="hljs-comment">//.publish(withTheme: .foundation)</span>
    using: [
        .copyResources(),
        .addMarkdownFiles(),
        .generateHTML(withTheme: .foundation),
        .generateRSSFeed(including: [.posts]),
        .generateSiteMap(),
        .unwrap(.gitHub(<span class="hljs-string">"chengzhenyu/chengzhenyu.github.io"</span>, useSSH: <span class="hljs-literal">false</span>), <span class="hljs-type">PublishingStep</span>.deploy)
        
    ]
)
</code></pre><h2>解决发布到github时遇到的问题</h2><ul><li>问题：写好了PublishingStep.deploy，执行publish deploy，无法发布到github。没反应！修改ssh 参数后，提示输入username，回车仍然没有反应。</li><li>解决方法：添加ssh key</li></ul><pre data-language="sh" class="hljs"><code><span class="hljs-variable">$git</span> config --global user.name “yourname”
<span class="hljs-variable">$git</span> config --global user.email“your@email.com<span class="hljs-string">"
<span class="hljs-variable">$ssh</span> -keygen -t rsa -C "</span>your@email.com<span class="hljs-string">"</span>
</code></pre><p>一路yes和回车。在.ssh文件夹下生成两个文件，id<em>rsa和id</em>rsa.pub，打开id_rsa.pub，将全部的内容复制，登录github添加ssh key</p><pre data-language="sh" class="hljs"><code>ssh -T git@github.com
</code></pre><p>输入yes，回车。</p><h2>xcode设置成run&amp;deploy</h2><p>点击Edit Scheme，在Aguments中添加--deploy</p><h2>博客的初始样子：P</h2><p>
<img src="https://chengzhenyu.github.io/images/screenshot-blog-initialversion.png" width="80%">
</p><p>下面这种markdown写法不支持设置图片大小？！</p><p><code>![baby](/images/screenshot-blog-initialversion.png)</code></p><h2>最后</h2><p>第一天，我去河边去打水，丢了我的鞋，我...开始玩Publish...</p><p>今天是2022年7月16日，这个博客出生了：）</p><h2>参考资料</h2><ul><li><a href="https://github.com/johnsundell/publish">Publish</a></li></ul><p>Welcome to Publish, a static site generator built specifically for Swift developers. It enables entire websites to be built using Swift, and supports themes, plugins and tons of other powerful customization options.</p><ul><li><a href="https://www.fatbobman.com/posts/publish-1/">肘子的Swift记事本</a></li></ul><p>Publish是一款专门为Swift开发者打造的静态网站生成器。它使用Swift构建整个网站，并支持主题、插件和其他大量的定制选项。</p><ul><li><a href="https://siddarthkalra.github.io/articles/2020-12-20-migrated-to-publish/">Migrated to Publish</a></li></ul><p>Today, I'm so glad to share that this website has been migrated to Publish, a static site generator by John Sundell written in Swift! 🎉</p><ul><li><a href="https://www.createwithswift.com/using-github-actions-to-deploy-static-sites-generated-with-swift-and-publish/">Using GitHub Actions to deploy Static Sites generated with Swift and Publish</a></li></ul><p>By the end of this tutorial, you will be able to use Github Actions to build and deploy a static website generated with Swift on Github Pages.</p><ul><li><a href="https://cloud.tencent.com/developer/article/1572090">git出错：“Please make sure you have the correct access rights and the repository exists.</a></li><li><a href="https://chenzhijin.com/en/article/Gallery%20Plugin%20for%20Publish/">PublishGallery Plugin for Publish</a></li><li><a href="https://dev.to/sowenjub/deploy-your-publish-website-for-free-on-github-pages-1nhn">Deploy your Publish website for free on GitHub Pages</a></li><li><a href="https://www.createwithswift.com/deploying-static-sites-generated-with-swift-and-publish-with-gitlab-ci-cd/">Deploying Static Sites generated with Swift and Publish with Gitlab CI/CD</a></li><li><a href="https://cloud.tencent.com/developer/ask/sof/998714/answer/1411722">如何将发布站点部署到GitHub页面</a></li></ul>]]></content:encoded></item></channel></rss>